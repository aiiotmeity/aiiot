{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './css/MapPage.css';\n\n// Helper function to get AQI color\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getAQIColor = aqi => {\n  if (aqi === null || aqi === undefined) return '#6b7280';\n  if (aqi <= 50) return '#10b981';\n  if (aqi <= 100) return '#f59e0b';\n  if (aqi <= 150) return '#ef4444';\n  if (aqi <= 200) return '#dc2626';\n  if (aqi <= 300) return '#7c2d12';\n  return '#4c1d95';\n};\n\n// Main Component\nconst MapPage = () => {\n  _s();\n  const [map, setMap] = React.useState(null);\n  const [stations, setStations] = React.useState({});\n  const [selectedStationId, setSelectedStationId] = React.useState('lora-v1');\n  const [forecastData, setForecastData] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isForecastLoading, setIsForecastLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [selectedParameter, setSelectedParameter] = React.useState('pm25');\n  const mapRef = React.useRef(null);\n  const markersRef = React.useRef({});\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Effect 1: Load Leaflet and initialize map (runs once)\n  React.useEffect(() => {\n    let isMounted = true;\n    const initialize = async () => {\n      try {\n        if (!window.L) {\n          const script = document.createElement('script');\n          script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\n          document.head.appendChild(script);\n          const link = document.createElement('link');\n          link.rel = \"stylesheet\";\n          link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\n          document.head.appendChild(link);\n          await new Promise(resolve => script.onload = resolve);\n        }\n        if (isMounted && mapRef.current && !mapRef.current._leaflet_id) {\n          const mapInstance = window.L.map(mapRef.current).setView([10.176, 76.430], 15);\n          window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);\n          setMap(mapInstance);\n        }\n      } catch (err) {\n        if (isMounted) setError(\"Failed to load map library.\");\n      }\n    };\n    initialize();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Effect 2: Fetch REAL-TIME data once map is ready\n  React.useEffect(() => {\n    if (!map) return;\n    let isMounted = true;\n    const fetchRealtimeData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // This is the fast API call for real-time data\n        const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\n        if (!response.ok) throw new Error(`Server error: ${response.status}`);\n        const data = await response.json();\n        if (isMounted) setStations(data.stations);\n      } catch (err) {\n        if (isMounted) setError(err.message);\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    fetchRealtimeData();\n  }, [map, API_BASE_URL]);\n\n  // Effect 3: Fetch FORECAST data when a station is selected\n  React.useEffect(() => {\n    if (!selectedStationId) return;\n    let isMounted = true;\n    const fetchForecastData = async () => {\n      setIsForecastLoading(true);\n      try {\n        // This is the second fast API call, only for the selected station's forecast\n        const response = await fetch(`${API_BASE_URL}/api/station/${selectedStationId}/forecast/`);\n        if (!response.ok) throw new Error(`Forecast server error: ${response.status}`);\n        const data = await response.json();\n        if (isMounted) setForecastData(data.forecast_data);\n      } catch (err) {\n        console.error(\"Forecast fetch error:\", err);\n        if (isMounted) setForecastData([]); // Set to empty on error\n      } finally {\n        if (isMounted) setIsForecastLoading(false);\n      }\n    };\n    fetchForecastData();\n    return () => {\n      isMounted = false;\n    };\n  }, [selectedStationId, API_BASE_URL]);\n\n  // Effect 4: Update map markers when station data changes\n  React.useEffect(() => {\n    if (!map || Object.keys(stations).length === 0) return;\n    Object.entries(stations).forEach(([id, station]) => {\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\n      if (markersRef.current[id]) {\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\n        markersRef.current[id].setStyle({\n          fillColor: getAQIColor(aqi)\n        });\n      } else {\n        const marker = window.L.circleMarker([lat, lng], {\n          radius: 15,\n          fillColor: getAQIColor(aqi),\n          color: '#fff',\n          weight: 3,\n          opacity: 1,\n          fillOpacity: 0.8\n        }).addTo(map);\n        marker.bindPopup(popupContent).on('click', () => setSelectedStationId(id));\n        markersRef.current[id] = marker;\n      }\n    });\n  }, [map, stations]);\n  const selectedStationData = stations[selectedStationId];\n  const chartData = {\n    labels: (forecastData === null || forecastData === void 0 ? void 0 : forecastData.map(d => d.day)) || [],\n    datasets: [{\n      label: `${selectedParameter.toUpperCase()} Forecast`,\n      data: (forecastData === null || forecastData === void 0 ? void 0 : forecastData.map(d => d[`${selectedParameter}_max`])) || [],\n      borderColor: '#3b82f6',\n      backgroundColor: 'rgba(59, 130, 246, 0.2)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        ref: mapRef,\n        className: \"map-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-panel open\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        style: {\n          margin: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-selector\",\n            children: Object.keys(stations).map(stationId => {\n              var _stations$stationId, _stations$stationId$s;\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `station-btn ${selectedStationId === stationId ? 'active' : ''}`,\n                onClick: () => setSelectedStationId(stationId),\n                children: ((_stations$stationId = stations[stationId]) === null || _stations$stationId === void 0 ? void 0 : (_stations$stationId$s = _stations$stationId.station_info) === null || _stations$stationId$s === void 0 ? void 0 : _stations$stationId$s.name) || stationId\n              }, stationId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: selectedStationData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"aqi-overview\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aqi-value\",\n                style: {\n                  color: getAQIColor(selectedStationData.highest_sub_index)\n                },\n                children: Math.round(selectedStationData.highest_sub_index) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aqi-status-text\",\n                children: [\"Air Quality Index (\", selectedStationData.aqi_status || 'Unknown', \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metrics-grid\",\n              children: ['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => {\n                var _selectedStationData$;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-label\",\n                    children: key.toUpperCase()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-value\",\n                    children: (_selectedStationData$ = selectedStationData.averages) !== null && _selectedStationData$ !== void 0 && _selectedStationData$[key] ? Math.round(selectedStationData.averages[key]) : '--'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 25\n                  }, this)]\n                }, key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast-title\",\n                children: \"4-Day Forecast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"parameter-controls\",\n                children: ['pm25', 'pm10', 'nh3', 'so2', 'no2', 'co', 'o3'].map(param => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `parameter-btn ${selectedParameter === param ? 'active' : ''}`,\n                  onClick: () => setSelectedParameter(param),\n                  children: param.toUpperCase()\n                }, param, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 21\n              }, this), isForecastLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-spinner\",\n                style: {\n                  margin: '2rem auto'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 23\n              }, this) : forecastData && forecastData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '200px'\n                },\n                children: /*#__PURE__*/_jsxDEV(Line, {\n                  data: chartData,\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    legend: {\n                      display: false\n                    },\n                    scales: {\n                      yAxes: [{\n                        ticks: {\n                          fontColor: '#94a3b8',\n                          beginAtZero: true\n                        }\n                      }],\n                      xAxes: [{\n                        ticks: {\n                          fontColor: '#94a3b8'\n                        }\n                      }]\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Forecast data not available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a station.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"vcpw/8EuF0u9xoVcnnvoxqED/yQ=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","getAQIColor","aqi","undefined","MapPage","_s","map","setMap","useState","stations","setStations","selectedStationId","setSelectedStationId","forecastData","setForecastData","isLoading","setIsLoading","isForecastLoading","setIsForecastLoading","error","setError","selectedParameter","setSelectedParameter","mapRef","useRef","markersRef","API_BASE_URL","process","env","REACT_APP_API_URL","useEffect","isMounted","initialize","window","L","script","document","createElement","src","head","appendChild","link","rel","href","Promise","resolve","onload","current","_leaflet_id","mapInstance","setView","tileLayer","addTo","err","fetchRealtimeData","response","fetch","ok","Error","status","data","json","message","fetchForecastData","forecast_data","console","Object","keys","length","entries","forEach","id","station","lat","lng","station_info","highest_sub_index","popupContent","name","Math","round","setLatLng","setPopupContent","setStyle","fillColor","marker","circleMarker","radius","color","weight","opacity","fillOpacity","bindPopup","on","selectedStationData","chartData","labels","d","day","datasets","label","toUpperCase","borderColor","backgroundColor","tension","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","margin","stationId","_stations$stationId","_stations$stationId$s","onClick","aqi_status","key","_selectedStationData$","averages","param","height","options","responsive","maintainAspectRatio","legend","display","scales","yAxes","ticks","fontColor","beginAtZero","xAxes","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './css/MapPage.css';\r\n\r\n// Helper function to get AQI color\r\nconst getAQIColor = (aqi) => {\r\n  if (aqi === null || aqi === undefined) return '#6b7280';\r\n  if (aqi <= 50) return '#10b981';\r\n  if (aqi <= 100) return '#f59e0b';\r\n  if (aqi <= 150) return '#ef4444';\r\n  if (aqi <= 200) return '#dc2626';\r\n  if (aqi <= 300) return '#7c2d12';\r\n  return '#4c1d95';\r\n};\r\n\r\n// Main Component\r\nconst MapPage = () => {\r\n  const [map, setMap] = React.useState(null);\r\n  const [stations, setStations] = React.useState({});\r\n  const [selectedStationId, setSelectedStationId] = React.useState('lora-v1');\r\n  const [forecastData, setForecastData] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [isForecastLoading, setIsForecastLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(null);\r\n  const [selectedParameter, setSelectedParameter] = React.useState('pm25');\r\n\r\n  const mapRef = React.useRef(null);\r\n  const markersRef = React.useRef({});\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  // Effect 1: Load Leaflet and initialize map (runs once)\r\n  React.useEffect(() => {\r\n    let isMounted = true;\r\n    const initialize = async () => {\r\n        try {\r\n            if (!window.L) {\r\n                const script = document.createElement('script');\r\n                script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\r\n                document.head.appendChild(script);\r\n                const link = document.createElement('link');\r\n                link.rel = \"stylesheet\";\r\n                link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\r\n                document.head.appendChild(link);\r\n                await new Promise(resolve => script.onload = resolve);\r\n            }\r\n            if (isMounted && mapRef.current && !mapRef.current._leaflet_id) {\r\n                const mapInstance = window.L.map(mapRef.current).setView([10.176, 76.430], 15);\r\n                window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);\r\n                setMap(mapInstance);\r\n            }\r\n        } catch (err) {\r\n            if (isMounted) setError(\"Failed to load map library.\");\r\n        }\r\n    };\r\n    initialize();\r\n    return () => { isMounted = false; };\r\n  }, []);\r\n\r\n  // Effect 2: Fetch REAL-TIME data once map is ready\r\n  React.useEffect(() => {\r\n    if (!map) return;\r\n    let isMounted = true;\r\n    const fetchRealtimeData = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        // This is the fast API call for real-time data\r\n        const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\r\n        if (!response.ok) throw new Error(`Server error: ${response.status}`);\r\n        const data = await response.json();\r\n        if (isMounted) setStations(data.stations);\r\n      } catch (err) {\r\n        if (isMounted) setError(err.message);\r\n      } finally {\r\n        if (isMounted) setIsLoading(false);\r\n      }\r\n    };\r\n    fetchRealtimeData();\r\n  }, [map, API_BASE_URL]);\r\n\r\n  // Effect 3: Fetch FORECAST data when a station is selected\r\n  React.useEffect(() => {\r\n    if (!selectedStationId) return;\r\n    let isMounted = true;\r\n    const fetchForecastData = async () => {\r\n      setIsForecastLoading(true);\r\n      try {\r\n        // This is the second fast API call, only for the selected station's forecast\r\n        const response = await fetch(`${API_BASE_URL}/api/station/${selectedStationId}/forecast/`);\r\n        if (!response.ok) throw new Error(`Forecast server error: ${response.status}`);\r\n        const data = await response.json();\r\n        if (isMounted) setForecastData(data.forecast_data);\r\n      } catch (err) {\r\n        console.error(\"Forecast fetch error:\", err);\r\n        if (isMounted) setForecastData([]); // Set to empty on error\r\n      } finally {\r\n        if (isMounted) setIsForecastLoading(false);\r\n      }\r\n    };\r\n    fetchForecastData();\r\n    return () => { isMounted = false; };\r\n  }, [selectedStationId, API_BASE_URL]);\r\n\r\n  // Effect 4: Update map markers when station data changes\r\n  React.useEffect(() => {\r\n    if (!map || Object.keys(stations).length === 0) return;\r\n    Object.entries(stations).forEach(([id, station]) => {\r\n      const { lat, lng } = station.station_info;\r\n      const aqi = station.highest_sub_index;\r\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\r\n      if (markersRef.current[id]) {\r\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\r\n        markersRef.current[id].setStyle({ fillColor: getAQIColor(aqi) });\r\n      } else {\r\n        const marker = window.L.circleMarker([lat, lng], { radius: 15, fillColor: getAQIColor(aqi), color: '#fff', weight: 3, opacity: 1, fillOpacity: 0.8 }).addTo(map);\r\n        marker.bindPopup(popupContent).on('click', () => setSelectedStationId(id));\r\n        markersRef.current[id] = marker;\r\n      }\r\n    });\r\n  }, [map, stations]);\r\n\r\n  const selectedStationData = stations[selectedStationId];\r\n  const chartData = {\r\n      labels: forecastData?.map(d => d.day) || [],\r\n      datasets: [{\r\n          label: `${selectedParameter.toUpperCase()} Forecast`,\r\n          data: forecastData?.map(d => d[`${selectedParameter}_max`]) || [],\r\n          borderColor: '#3b82f6', backgroundColor: 'rgba(59, 130, 246, 0.2)', tension: 0.1\r\n      }]\r\n  };\r\n\r\n  return (\r\n    <div className=\"map-page\">\r\n      <div className=\"map-container\">\r\n        <div id=\"map\" ref={mapRef} className=\"map-element\"></div>\r\n      </div>\r\n      <div className=\"details-panel open\">\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {isLoading ? (\r\n          <div className=\"loading-spinner\" style={{ margin: 'auto' }}></div>\r\n        ) : (\r\n          <>\r\n            <div className=\"panel-header\">\r\n              <div className=\"station-selector\">\r\n                {Object.keys(stations).map(stationId => (\r\n                  <button key={stationId} className={`station-btn ${selectedStationId === stationId ? 'active' : ''}`} onClick={() => setSelectedStationId(stationId)}>\r\n                    {stations[stationId]?.station_info?.name || stationId}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"panel-content\">\r\n              {selectedStationData ? (\r\n                <>\r\n                  <div className=\"aqi-overview\">\r\n                    <div className=\"aqi-value\" style={{ color: getAQIColor(selectedStationData.highest_sub_index) }}>\r\n                      {Math.round(selectedStationData.highest_sub_index) || 'N/A'}\r\n                    </div>\r\n                    <div className=\"aqi-status-text\">Air Quality Index ({selectedStationData.aqi_status || 'Unknown'})</div>\r\n                  </div>\r\n                  <div className=\"metrics-grid\">\r\n                    {['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => (\r\n                      <div key={key} className=\"metric-card\">\r\n                        <div className=\"metric-label\">{key.toUpperCase()}</div>\r\n                        <div className=\"metric-value\">{selectedStationData.averages?.[key] ? Math.round(selectedStationData.averages[key]) : '--'}</div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <div className=\"forecast-section\">\r\n                    <div className=\"forecast-title\">4-Day Forecast</div>\r\n                    <div className=\"parameter-controls\">\r\n                      {['pm25', 'pm10', 'nh3', 'so2', 'no2', 'co', 'o3'].map(param => (\r\n                        <button key={param} className={`parameter-btn ${selectedParameter === param ? 'active' : ''}`} onClick={() => setSelectedParameter(param)}>\r\n                          {param.toUpperCase()}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    {isForecastLoading ? (\r\n                      <div className=\"loading-spinner\" style={{ margin: '2rem auto' }}></div>\r\n                    ) : forecastData && forecastData.length > 0 ? (\r\n                      <div style={{ height: '200px' }}>\r\n                        <Line data={chartData} options={{ responsive: true, maintainAspectRatio: false, legend: { display: false }, scales: { yAxes: [{ ticks: { fontColor: '#94a3b8', beginAtZero: true } }], xAxes: [{ ticks: { fontColor: '#94a3b8' } }] } }} />\r\n                      </div>\r\n                    ) : (\r\n                      <p>Forecast data not available.</p>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              ) : <p>Select a station.</p>}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}