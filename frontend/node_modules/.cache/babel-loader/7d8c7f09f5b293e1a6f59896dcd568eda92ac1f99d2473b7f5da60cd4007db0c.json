{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { useAuth } from '../App';\nimport './css/MapPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst getAQIColor = aqi => {\n  if (aqi === null || aqi === undefined) return '#6b7280';\n  if (aqi <= 50) return '#10b981';\n  if (aqi <= 100) return '#f59e0b';\n  if (aqi <= 200) return '#ef4444';\n  return '#7c2d12';\n};\nconst getAQIStatus = aqi => {\n  if (aqi === null || aqi === undefined) return 'Unknown';\n  if (aqi <= 50) return 'Good';\n  if (aqi <= 100) return 'Moderate';\n  if (aqi <= 150) return 'Unhealthy';\n  if (aqi <= 200) return 'Severe';\n  if (aqi <= 300) return 'Very Severe';\n  return 'Hazardous';\n};\nconst MapPage = () => {\n  _s();\n  const [mapInstance, setMapInstance] = useState(null);\n  const [stations, setStations] = useState({});\n  const [selectedStationId, setSelectedStationId] = useState(null);\n  const [forecastData, setForecastData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isForecastLoading, setIsForecastLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const [selectedParameter, setSelectedParameter] = useState('pm25_max');\n  const [forecastUpdatedAt, setForecastUpdatedAt] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef({});\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  useEffect(() => {\n    let map;\n    if (mapRef.current && !mapRef.current._leaflet_id) {\n      map = window.L.map(mapRef.current).setView([10.176, 76.430], 13);\n      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n      setMapInstance(map);\n    }\n    return () => {\n      if (map) map.remove();\n    };\n  }, []);\n  const fetchRealtimeData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\n      const data = await response.json();\n      setStations(data.stations);\n      if (!selectedStationId && Object.keys(data.stations).length > 0) {\n        setSelectedStationId(Object.keys(data.stations)[0]);\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [API_BASE_URL, selectedStationId]);\n  useEffect(() => {\n    fetchRealtimeData();\n    const interval = setInterval(fetchRealtimeData, 60000);\n    return () => clearInterval(interval);\n  }, [fetchRealtimeData]);\n  useEffect(() => {\n    if (!selectedStationId) return;\n    const fetchForecast = async () => {\n      setIsForecastLoading(true);\n      try {\n        const response = await fetch(`${API_BASE_URL}/api/station/${selectedStationId}/forecast/`);\n        const data = await response.json();\n        setForecastData(data.forecast_data || []);\n        setForecastUpdatedAt(data.forecast_updated_at || null);\n      } catch (err) {\n        console.error(\"Forecast fetch error:\", err);\n        setForecastData([]);\n      } finally {\n        setIsForecastLoading(false);\n      }\n    };\n    fetchForecast();\n  }, [selectedStationId, API_BASE_URL]);\n  useEffect(() => {\n    if (!mapInstance || Object.keys(stations).length === 0) return;\n    Object.values(markersRef.current).forEach(marker => marker.remove());\n    markersRef.current = {};\n    Object.entries(stations).forEach(([id, station]) => {\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const markerOptions = {\n        radius: selectedStationId === id ? 12 : 8,\n        fillColor: getAQIColor(aqi),\n        color: selectedStationId === id ? '#ffffff' : '#1e293b',\n        weight: selectedStationId === id ? 3 : 1.5,\n        opacity: 1,\n        fillOpacity: 0.85\n      };\n      const marker = window.L.circleMarker([lat, lng], markerOptions).addTo(mapInstance);\n      marker.on('click', () => {\n        setSelectedStationId(id);\n        setIsPanelOpen(true);\n        mapInstance.setView([lat, lng], 15);\n      });\n      markersRef.current[id] = marker;\n    });\n  }, [mapInstance, stations, selectedStationId]);\n  const selectedStationData = stations[selectedStationId];\n  const pollutants = [{\n    key: 'pm25',\n    name: 'PM2.5'\n  }, {\n    key: 'pm10',\n    name: 'PM10'\n  }, {\n    key: 'so2',\n    name: 'SO₂'\n  }, {\n    key: 'no2',\n    name: 'NO₂'\n  }, {\n    key: 'co',\n    name: 'CO'\n  }, {\n    key: 'o3',\n    name: 'O₃'\n  }, {\n    key: 'nh3',\n    name: 'NH₃'\n  }];\n  const forecastChartData = useMemo(() => {\n    if (!forecastData || forecastData.length === 0) {\n      return {\n        labels: [],\n        datasets: []\n      };\n    }\n    const labels = forecastData.map(d => new Date(d.day).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    }));\n    const dataPoints = forecastData.map(d => d[selectedParameter]);\n    return {\n      labels,\n      datasets: [{\n        label: selectedParameter.replace('_max', '').toUpperCase(),\n        data: dataPoints,\n        borderColor: '#3b82f6',\n        backgroundColor: 'rgba(59, 130, 246, 0.2)',\n        fill: true,\n        tension: 0.4\n      }]\n    };\n  }, [forecastData, selectedParameter]);\n  const forecastChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          color: '#94a3b8'\n        }\n      },\n      y: {\n        ticks: {\n          color: '#94a3b8'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          ref: mapRef,\n          className: \"map-element\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `details-panel ${isPanelOpen ? 'open' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"panel-toggle\",\n          onClick: () => setIsPanelOpen(!isPanelOpen)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-loader\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 68\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 38\n          }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this) : selectedStationData ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: selectedStationData.station_info.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Current AQI: \", Math.round(selectedStationData.highest_sub_index), \" (\", getAQIStatus(selectedStationData.highest_sub_index), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pollutant-metrics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast-header\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this), forecastUpdatedAt && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '0.75rem',\n                  color: '#94a3b8',\n                  marginBottom: '0.5rem'\n                },\n                children: [\"Updated: \", new Date(forecastUpdatedAt).toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 59\n              }, this), isForecastLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"panel-loader\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Loading forecast...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 71\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chart-container\",\n                children: forecastChartData && forecastChartData.labels && forecastChartData.labels.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n                  options: forecastChartOptions,\n                  data: forecastChartData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 49\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    color: '#94a3b8',\n                    fontSize: '0.8rem',\n                    textAlign: 'center',\n                    marginTop: '2rem'\n                  },\n                  children: \"No forecast data available for this station.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(MapPage, \"9yvPHiYHv5txg0vjAwmVXfG0I5U=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","Link","useNavigate","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","useAuth","jsxDEV","_jsxDEV","register","getAQIColor","aqi","undefined","getAQIStatus","MapPage","_s","mapInstance","setMapInstance","stations","setStations","selectedStationId","setSelectedStationId","forecastData","setForecastData","isLoading","setIsLoading","isForecastLoading","setIsForecastLoading","error","setError","isPanelOpen","setIsPanelOpen","selectedParameter","setSelectedParameter","forecastUpdatedAt","setForecastUpdatedAt","mapRef","markersRef","navigate","user","API_BASE_URL","process","env","REACT_APP_API_URL","map","current","_leaflet_id","window","L","setView","tileLayer","addTo","remove","fetchRealtimeData","response","fetch","data","json","Object","keys","length","err","message","interval","setInterval","clearInterval","fetchForecast","forecast_data","forecast_updated_at","console","values","forEach","marker","entries","id","station","lat","lng","station_info","highest_sub_index","markerOptions","radius","fillColor","color","weight","opacity","fillOpacity","circleMarker","on","selectedStationData","pollutants","key","name","forecastChartData","labels","datasets","d","Date","day","toLocaleDateString","month","dataPoints","label","replace","toUpperCase","borderColor","backgroundColor","fill","tension","forecastChartOptions","responsive","maintainAspectRatio","plugins","legend","display","scales","x","ticks","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","Math","round","style","fontSize","marginBottom","toLocaleString","options","textAlign","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\r\nimport { useAuth } from '../App';\r\nimport './css/MapPage.css';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\r\n\r\nconst getAQIColor = (aqi) => {\r\n    if (aqi === null || aqi === undefined) return '#6b7280';\r\n    if (aqi <= 50) return '#10b981';\r\n    if (aqi <= 100) return '#f59e0b';\r\n    if (aqi <= 200) return '#ef4444';\r\n    return '#7c2d12';\r\n};\r\n\r\nconst getAQIStatus = (aqi) => {\r\n    if (aqi === null || aqi === undefined) return 'Unknown';\r\n    if (aqi <= 50) return 'Good';\r\n    if (aqi <= 100) return 'Moderate';\r\n    if (aqi <= 150) return 'Unhealthy';\r\n    if (aqi <= 200) return 'Severe';\r\n    if (aqi <= 300) return 'Very Severe';\r\n    return 'Hazardous';\r\n};\r\n\r\nconst MapPage = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [stations, setStations] = useState({});\r\n    const [selectedStationId, setSelectedStationId] = useState(null);\r\n    const [forecastData, setForecastData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isForecastLoading, setIsForecastLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [isPanelOpen, setIsPanelOpen] = useState(true);\r\n    const [selectedParameter, setSelectedParameter] = useState('pm25_max');\r\n    const [forecastUpdatedAt, setForecastUpdatedAt] = useState(null);\r\n\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef({});\r\n    const navigate = useNavigate();\r\n    const { user } = useAuth();\r\n    const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n    useEffect(() => {\r\n        let map;\r\n        if (mapRef.current && !mapRef.current._leaflet_id) {\r\n            map = window.L.map(mapRef.current).setView([10.176, 76.430], 13);\r\n            window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\r\n            setMapInstance(map);\r\n        }\r\n        return () => { if (map) map.remove(); };\r\n    }, []);\r\n\r\n    const fetchRealtimeData = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\r\n            const data = await response.json();\r\n            setStations(data.stations);\r\n            if (!selectedStationId && Object.keys(data.stations).length > 0) {\r\n                setSelectedStationId(Object.keys(data.stations)[0]);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [API_BASE_URL, selectedStationId]);\r\n\r\n    useEffect(() => {\r\n        fetchRealtimeData();\r\n        const interval = setInterval(fetchRealtimeData, 60000);\r\n        return () => clearInterval(interval);\r\n    }, [fetchRealtimeData]);\r\n\r\n    useEffect(() => {\r\n        if (!selectedStationId) return;\r\n        const fetchForecast = async () => {\r\n            setIsForecastLoading(true);\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/api/station/${selectedStationId}/forecast/`);\r\n                const data = await response.json();\r\n                setForecastData(data.forecast_data || []);\r\n                setForecastUpdatedAt(data.forecast_updated_at || null);\r\n            } catch (err) {\r\n                console.error(\"Forecast fetch error:\", err);\r\n                setForecastData([]);\r\n            } finally {\r\n                setIsForecastLoading(false);\r\n            }\r\n        };\r\n        fetchForecast();\r\n    }, [selectedStationId, API_BASE_URL]);\r\n    \r\n    useEffect(() => {\r\n        if (!mapInstance || Object.keys(stations).length === 0) return;\r\n        \r\n        Object.values(markersRef.current).forEach(marker => marker.remove());\r\n        markersRef.current = {};\r\n\r\n        Object.entries(stations).forEach(([id, station]) => {\r\n            const { lat, lng } = station.station_info;\r\n            const aqi = station.highest_sub_index;\r\n            const markerOptions = { radius: selectedStationId === id ? 12 : 8, fillColor: getAQIColor(aqi), color: selectedStationId === id ? '#ffffff' : '#1e293b', weight: selectedStationId === id ? 3 : 1.5, opacity: 1, fillOpacity: 0.85 };\r\n            const marker = window.L.circleMarker([lat, lng], markerOptions).addTo(mapInstance);\r\n            marker.on('click', () => {\r\n                setSelectedStationId(id);\r\n                setIsPanelOpen(true);\r\n                mapInstance.setView([lat, lng], 15);\r\n            });\r\n            markersRef.current[id] = marker;\r\n        });\r\n    }, [mapInstance, stations, selectedStationId]);\r\n\r\n    const selectedStationData = stations[selectedStationId];\r\n    \r\n    const pollutants = [\r\n        { key: 'pm25', name: 'PM2.5' }, { key: 'pm10', name: 'PM10' }, { key: 'so2', name: 'SO₂' }, \r\n        { key: 'no2', name: 'NO₂' }, { key: 'co', name: 'CO' }, { key: 'o3', name: 'O₃' }, { key: 'nh3', name: 'NH₃' }\r\n    ];\r\n\r\n    const forecastChartData = useMemo(() => {\r\n        if (!forecastData || forecastData.length === 0) {\r\n            return { labels: [], datasets: [] };\r\n        }\r\n        const labels = forecastData.map(d => new Date(d.day).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\r\n        const dataPoints = forecastData.map(d => d[selectedParameter]);\r\n        return {\r\n            labels,\r\n            datasets: [{\r\n                label: selectedParameter.replace('_max', '').toUpperCase(),\r\n                data: dataPoints,\r\n                borderColor: '#3b82f6',\r\n                backgroundColor: 'rgba(59, 130, 246, 0.2)',\r\n                fill: true,\r\n                tension: 0.4,\r\n            }]\r\n        };\r\n    }, [forecastData, selectedParameter]);\r\n\r\n    const forecastChartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: { legend: { display: false } },\r\n        scales: { x: { ticks: { color: '#94a3b8' } }, y: { ticks: { color: '#94a3b8' } } }\r\n    };\r\n\r\n    return (\r\n        <div className=\"map-page\">\r\n            <nav className=\"navbar\">{/* ... your navbar JSX ... */}</nav>\r\n            <div className=\"main-content\">\r\n                <div className=\"map-container\"><div id=\"map\" ref={mapRef} className=\"map-element\"></div></div>\r\n                <div className={`details-panel ${isPanelOpen ? 'open' : ''}`}>\r\n                    <button className=\"panel-toggle\" onClick={() => setIsPanelOpen(!isPanelOpen)}>{/* ... */}</button>\r\n                    <div className=\"panel-header\">{/* ... your station selector ... */}</div>\r\n                    <div className=\"panel-content\">\r\n                        {isLoading ? <div className=\"panel-loader\"><div className=\"loading-spinner\"></div></div> :\r\n                        error ? <div>Error: {error}</div> :\r\n                        selectedStationData ? (\r\n                            <div>\r\n                                <h3>{selectedStationData.station_info.name}</h3>\r\n                                <p>Current AQI: {Math.round(selectedStationData.highest_sub_index)} ({getAQIStatus(selectedStationData.highest_sub_index)})</p>\r\n                                <div className=\"pollutant-metrics\">{/* ... your pollutant grid ... */}</div>\r\n                                <div className=\"forecast-section\">\r\n                                    <div className=\"forecast-header\">{/* ... your forecast header ... */}</div>\r\n                                    {forecastUpdatedAt && <div style={{ fontSize: '0.75rem', color: '#94a3b8', marginBottom: '0.5rem' }}>Updated: {new Date(forecastUpdatedAt).toLocaleString()}</div>}\r\n                                    \r\n                                    {isForecastLoading ? (\r\n                                        <div className=\"panel-loader\"><p>Loading forecast...</p></div>\r\n                                    ) : (\r\n                                        <div className=\"chart-container\">\r\n                                            {/* --- FINAL FIX: Check if chart data is valid before rendering the chart --- */}\r\n                                            {(forecastChartData && forecastChartData.labels && forecastChartData.labels.length > 0) ? (\r\n                                                <Line options={forecastChartOptions} data={forecastChartData} />\r\n                                            ) : (\r\n                                                <p style={{color: '#94a3b8', fontSize: '0.8rem', textAlign: 'center', marginTop: '2rem'}}>\r\n                                                    No forecast data available for this station.\r\n                                                </p>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAChF,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,QAAQ,UAAU;AAClI,SAASC,OAAO,QAAQ,QAAQ;AAChC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3BX,OAAO,CAACY,QAAQ,CAACX,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,CAAC;AAEvG,MAAMK,WAAW,GAAIC,GAAG,IAAK;EACzB,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKC,SAAS,EAAE,OAAO,SAAS;EACvD,IAAID,GAAG,IAAI,EAAE,EAAE,OAAO,SAAS;EAC/B,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,SAAS;EAChC,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,SAAS;EAChC,OAAO,SAAS;AACpB,CAAC;AAED,MAAME,YAAY,GAAIF,GAAG,IAAK;EAC1B,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKC,SAAS,EAAE,OAAO,SAAS;EACvD,IAAID,GAAG,IAAI,EAAE,EAAE,OAAO,MAAM;EAC5B,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,UAAU;EACjC,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,WAAW;EAClC,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,QAAQ;EAC/B,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,aAAa;EACpC,OAAO,WAAW;AACtB,CAAC;AAED,MAAMG,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC8B,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACgC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoC,SAAS,EAAEC,YAAY,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACsC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACwC,KAAK,EAAEC,QAAQ,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC0C,WAAW,EAAEC,cAAc,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC4C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7C,QAAQ,CAAC,UAAU,CAAC;EACtE,MAAM,CAAC8C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAEhE,MAAMgD,MAAM,GAAG9C,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM+C,UAAU,GAAG/C,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7B,MAAMgD,QAAQ,GAAG5C,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAE6C;EAAK,CAAC,GAAGjC,OAAO,CAAC,CAAC;EAC1B,MAAMkC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EAE7EtD,SAAS,CAAC,MAAM;IACZ,IAAIuD,GAAG;IACP,IAAIR,MAAM,CAACS,OAAO,IAAI,CAACT,MAAM,CAACS,OAAO,CAACC,WAAW,EAAE;MAC/CF,GAAG,GAAGG,MAAM,CAACC,CAAC,CAACJ,GAAG,CAACR,MAAM,CAACS,OAAO,CAAC,CAACI,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;MAChEF,MAAM,CAACC,CAAC,CAACE,SAAS,CAAC,oDAAoD,CAAC,CAACC,KAAK,CAACP,GAAG,CAAC;MACnF3B,cAAc,CAAC2B,GAAG,CAAC;IACvB;IACA,OAAO,MAAM;MAAE,IAAIA,GAAG,EAAEA,GAAG,CAACQ,MAAM,CAAC,CAAC;IAAE,CAAC;EAC3C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAG9D,WAAW,CAAC,YAAY;IAC9CkC,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACA,MAAM6B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,YAAY,oBAAoB,CAAC;MACjE,MAAMgB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCtC,WAAW,CAACqC,IAAI,CAACtC,QAAQ,CAAC;MAC1B,IAAI,CAACE,iBAAiB,IAAIsC,MAAM,CAACC,IAAI,CAACH,IAAI,CAACtC,QAAQ,CAAC,CAAC0C,MAAM,GAAG,CAAC,EAAE;QAC7DvC,oBAAoB,CAACqC,MAAM,CAACC,IAAI,CAACH,IAAI,CAACtC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACvD;IACJ,CAAC,CAAC,OAAO2C,GAAG,EAAE;MACVhC,QAAQ,CAACgC,GAAG,CAACC,OAAO,CAAC;IACzB,CAAC,SAAS;MACNrC,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACe,YAAY,EAAEpB,iBAAiB,CAAC,CAAC;EAErC/B,SAAS,CAAC,MAAM;IACZgE,iBAAiB,CAAC,CAAC;IACnB,MAAMU,QAAQ,GAAGC,WAAW,CAACX,iBAAiB,EAAE,KAAK,CAAC;IACtD,OAAO,MAAMY,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACV,iBAAiB,CAAC,CAAC;EAEvBhE,SAAS,CAAC,MAAM;IACZ,IAAI,CAAC+B,iBAAiB,EAAE;IACxB,MAAM8C,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9BvC,oBAAoB,CAAC,IAAI,CAAC;MAC1B,IAAI;QACA,MAAM2B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,YAAY,gBAAgBpB,iBAAiB,YAAY,CAAC;QAC1F,MAAMoC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClClC,eAAe,CAACiC,IAAI,CAACW,aAAa,IAAI,EAAE,CAAC;QACzChC,oBAAoB,CAACqB,IAAI,CAACY,mBAAmB,IAAI,IAAI,CAAC;MAC1D,CAAC,CAAC,OAAOP,GAAG,EAAE;QACVQ,OAAO,CAACzC,KAAK,CAAC,uBAAuB,EAAEiC,GAAG,CAAC;QAC3CtC,eAAe,CAAC,EAAE,CAAC;MACvB,CAAC,SAAS;QACNI,oBAAoB,CAAC,KAAK,CAAC;MAC/B;IACJ,CAAC;IACDuC,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAAC9C,iBAAiB,EAAEoB,YAAY,CAAC,CAAC;EAErCnD,SAAS,CAAC,MAAM;IACZ,IAAI,CAAC2B,WAAW,IAAI0C,MAAM,CAACC,IAAI,CAACzC,QAAQ,CAAC,CAAC0C,MAAM,KAAK,CAAC,EAAE;IAExDF,MAAM,CAACY,MAAM,CAACjC,UAAU,CAACQ,OAAO,CAAC,CAAC0B,OAAO,CAACC,MAAM,IAAIA,MAAM,CAACpB,MAAM,CAAC,CAAC,CAAC;IACpEf,UAAU,CAACQ,OAAO,GAAG,CAAC,CAAC;IAEvBa,MAAM,CAACe,OAAO,CAACvD,QAAQ,CAAC,CAACqD,OAAO,CAAC,CAAC,CAACG,EAAE,EAAEC,OAAO,CAAC,KAAK;MAChD,MAAM;QAAEC,GAAG;QAAEC;MAAI,CAAC,GAAGF,OAAO,CAACG,YAAY;MACzC,MAAMnE,GAAG,GAAGgE,OAAO,CAACI,iBAAiB;MACrC,MAAMC,aAAa,GAAG;QAAEC,MAAM,EAAE7D,iBAAiB,KAAKsD,EAAE,GAAG,EAAE,GAAG,CAAC;QAAEQ,SAAS,EAAExE,WAAW,CAACC,GAAG,CAAC;QAAEwE,KAAK,EAAE/D,iBAAiB,KAAKsD,EAAE,GAAG,SAAS,GAAG,SAAS;QAAEU,MAAM,EAAEhE,iBAAiB,KAAKsD,EAAE,GAAG,CAAC,GAAG,GAAG;QAAEW,OAAO,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAK,CAAC;MACpO,MAAMd,MAAM,GAAGzB,MAAM,CAACC,CAAC,CAACuC,YAAY,CAAC,CAACX,GAAG,EAAEC,GAAG,CAAC,EAAEG,aAAa,CAAC,CAAC7B,KAAK,CAACnC,WAAW,CAAC;MAClFwD,MAAM,CAACgB,EAAE,CAAC,OAAO,EAAE,MAAM;QACrBnE,oBAAoB,CAACqD,EAAE,CAAC;QACxB3C,cAAc,CAAC,IAAI,CAAC;QACpBf,WAAW,CAACiC,OAAO,CAAC,CAAC2B,GAAG,EAAEC,GAAG,CAAC,EAAE,EAAE,CAAC;MACvC,CAAC,CAAC;MACFxC,UAAU,CAACQ,OAAO,CAAC6B,EAAE,CAAC,GAAGF,MAAM;IACnC,CAAC,CAAC;EACN,CAAC,EAAE,CAACxD,WAAW,EAAEE,QAAQ,EAAEE,iBAAiB,CAAC,CAAC;EAE9C,MAAMqE,mBAAmB,GAAGvE,QAAQ,CAACE,iBAAiB,CAAC;EAEvD,MAAMsE,UAAU,GAAG,CACf;IAAEC,GAAG,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAQ,CAAC,EAAE;IAAED,GAAG,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAO,CAAC,EAAE;IAAED,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,EAC1F;IAAED,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,EAAE;IAAED,GAAG,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAK,CAAC,EAAE;IAAED,GAAG,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAK,CAAC,EAAE;IAAED,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,CACjH;EAED,MAAMC,iBAAiB,GAAGrG,OAAO,CAAC,MAAM;IACpC,IAAI,CAAC8B,YAAY,IAAIA,YAAY,CAACsC,MAAM,KAAK,CAAC,EAAE;MAC5C,OAAO;QAAEkC,MAAM,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAC;IACvC;IACA,MAAMD,MAAM,GAAGxE,YAAY,CAACsB,GAAG,CAACoD,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,GAAG,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEF,GAAG,EAAE;IAAU,CAAC,CAAC,CAAC;IACrH,MAAMG,UAAU,GAAG/E,YAAY,CAACsB,GAAG,CAACoD,CAAC,IAAIA,CAAC,CAAChE,iBAAiB,CAAC,CAAC;IAC9D,OAAO;MACH8D,MAAM;MACNC,QAAQ,EAAE,CAAC;QACPO,KAAK,EAAEtE,iBAAiB,CAACuE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;QAC1DhD,IAAI,EAAE6C,UAAU;QAChBI,WAAW,EAAE,SAAS;QACtBC,eAAe,EAAE,yBAAyB;QAC1CC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE;MACb,CAAC;IACL,CAAC;EACL,CAAC,EAAE,CAACtF,YAAY,EAAEU,iBAAiB,CAAC,CAAC;EAErC,MAAM6E,oBAAoB,GAAG;IACzBC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MAAEC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAM;IAAE,CAAC;IACvCC,MAAM,EAAE;MAAEC,CAAC,EAAE;QAAEC,KAAK,EAAE;UAAElC,KAAK,EAAE;QAAU;MAAE,CAAC;MAAEmC,CAAC,EAAE;QAAED,KAAK,EAAE;UAAElC,KAAK,EAAE;QAAU;MAAE;IAAE;EACrF,CAAC;EAED,oBACI3E,OAAA;IAAK+G,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrBhH,OAAA;MAAK+G,SAAS,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqC,CAAC,eAC7DpH,OAAA;MAAK+G,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBhH,OAAA;QAAK+G,SAAS,EAAC,eAAe;QAAAC,QAAA,eAAChH,OAAA;UAAKkE,EAAE,EAAC,KAAK;UAACmD,GAAG,EAAEzF,MAAO;UAACmF,SAAS,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC9FpH,OAAA;QAAK+G,SAAS,EAAE,iBAAiBzF,WAAW,GAAG,MAAM,GAAG,EAAE,EAAG;QAAA0F,QAAA,gBACzDhH,OAAA;UAAQ+G,SAAS,EAAC,cAAc;UAACO,OAAO,EAAEA,CAAA,KAAM/F,cAAc,CAAC,CAACD,WAAW;QAAE;UAAA2F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CAAC,eAClGpH,OAAA;UAAK+G,SAAS,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA2C,CAAC,eACzEpH,OAAA;UAAK+G,SAAS,EAAC,eAAe;UAAAC,QAAA,EACzBhG,SAAS,gBAAGhB,OAAA;YAAK+G,SAAS,EAAC,cAAc;YAAAC,QAAA,eAAChH,OAAA;cAAK+G,SAAS,EAAC;YAAiB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,GACxFhG,KAAK,gBAAGpB,OAAA;YAAAgH,QAAA,GAAK,SAAO,EAAC5F,KAAK;UAAA;YAAA6F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,GACjCnC,mBAAmB,gBACfjF,OAAA;YAAAgH,QAAA,gBACIhH,OAAA;cAAAgH,QAAA,EAAK/B,mBAAmB,CAACX,YAAY,CAACc;YAAI;cAAA6B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAChDpH,OAAA;cAAAgH,QAAA,GAAG,eAAa,EAACO,IAAI,CAACC,KAAK,CAACvC,mBAAmB,CAACV,iBAAiB,CAAC,EAAC,IAAE,EAAClE,YAAY,CAAC4E,mBAAmB,CAACV,iBAAiB,CAAC,EAAC,GAAC;YAAA;cAAA0C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAC/HpH,OAAA;cAAK+G,SAAS,EAAC;YAAmB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAyC,CAAC,eAC5EpH,OAAA;cAAK+G,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC7BhH,OAAA;gBAAK+G,SAAS,EAAC;cAAiB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAA0C,CAAC,EAC1E1F,iBAAiB,iBAAI1B,OAAA;gBAAKyH,KAAK,EAAE;kBAAEC,QAAQ,EAAE,SAAS;kBAAE/C,KAAK,EAAE,SAAS;kBAAEgD,YAAY,EAAE;gBAAS,CAAE;gBAAAX,QAAA,GAAC,WAAS,EAAC,IAAIvB,IAAI,CAAC/D,iBAAiB,CAAC,CAACkG,cAAc,CAAC,CAAC;cAAA;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAEjKlG,iBAAiB,gBACdlB,OAAA;gBAAK+G,SAAS,EAAC,cAAc;gBAAAC,QAAA,eAAChH,OAAA;kBAAAgH,QAAA,EAAG;gBAAmB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,gBAE9DpH,OAAA;gBAAK+G,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAE1B3B,iBAAiB,IAAIA,iBAAiB,CAACC,MAAM,IAAID,iBAAiB,CAACC,MAAM,CAAClC,MAAM,GAAG,CAAC,gBAClFpD,OAAA,CAACb,IAAI;kBAAC0I,OAAO,EAAExB,oBAAqB;kBAACrD,IAAI,EAAEqC;gBAAkB;kBAAA4B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,gBAEhEpH,OAAA;kBAAGyH,KAAK,EAAE;oBAAC9C,KAAK,EAAE,SAAS;oBAAE+C,QAAQ,EAAE,QAAQ;oBAAEI,SAAS,EAAE,QAAQ;oBAAEC,SAAS,EAAE;kBAAM,CAAE;kBAAAf,QAAA,EAAC;gBAE1F;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG;cACN;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CACR;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,GACN;QAAI;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC7G,EAAA,CApKID,OAAO;EAAA,QAcQpB,WAAW,EACXY,OAAO;AAAA;AAAAkI,EAAA,GAftB1H,OAAO;AAsKb,eAAeA,OAAO;AAAC,IAAA0H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}