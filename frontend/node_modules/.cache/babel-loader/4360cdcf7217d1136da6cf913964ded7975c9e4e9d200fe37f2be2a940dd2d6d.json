{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\Downloads\\\\aiiot-main\\\\aiiot-main\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './css/Dashboard.css';\nimport logoImage from '../assets/aqi.webp';\nimport { useAuth } from '../App';\n\n// Lazy loading components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LazyMap = /*#__PURE__*/React.lazy(_c = () => import('./LazyMap'));\n_c2 = LazyMap;\nconst LazyChart = /*#__PURE__*/React.lazy(_c3 = () => import('./LazyChart'));\n\n// --- ALL HELPER FUNCTIONS (Your existing helpers are correct) ---\n_c4 = LazyChart;\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst getLocationName = async (lat, lng) => {\n  // This is a simplified placeholder. Your complex getLocationName function is good.\n  try {\n    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\n    const data = await response.json();\n    return {\n      display_name: data.display_name || 'Unknown Location',\n      city: data.address.city || 'Unknown'\n    };\n  } catch {\n    return {\n      display_name: 'Your Location',\n      city: 'Unknown',\n      state: 'Kerala',\n      country: 'India'\n    };\n  }\n};\nfunction Dashboard() {\n  _s();\n  // ===== STATE MANAGEMENT =====\n  const {\n    user,\n    logout\n  } = useAuth();\n  const [selectedParameter, setSelectedParameter] = useState('pm25');\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [dashboardData, setDashboardData] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [userLocationName, setUserLocationName] = useState(null);\n  const [nearestStationInfo, setNearestStationInfo] = useState(null);\n  const [currentDataInfo, setCurrentDataInfo] = useState(null);\n  const [locationStatus, setLocationStatus] = useState('initializing');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isLocationUpdating, setIsLocationUpdating] = useState(false);\n  const [lastUpdateTime, setLastUpdateTime] = useState(new Date());\n  const [healthData, setHealthData] = useState(null);\n  const [isMobileView, setIsMobileView] = useState(window.innerWidth <= 768);\n  const navigate = useNavigate();\n  const API_BASE_URL = process.env.NODE_ENV === 'production' ? 'https://airaware-app-gcw7.onrender.com' : 'http://localhost:8000';\n  const abortControllerRef = useRef(null);\n\n  // ===== FUNCTION DEFINITIONS (CORRECT ORDER) =====\n\n  const processDashboardData = useCallback((data, locationData) => {\n    setDashboardData(data);\n    console.log('📊 Dashboard data processed successfully');\n  }, [userLocationName]);\n  const getUserLocation = useCallback(() => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        return reject(new Error('Geolocation not supported.'));\n      }\n      setLocationStatus('detecting');\n      setIsLocationUpdating(true);\n      navigator.geolocation.getCurrentPosition(async position => {\n        const location = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        };\n        setUserLocation(location);\n        try {\n          const name = await getLocationName(location.lat, location.lng);\n          setUserLocationName(name);\n        } catch {\n          setUserLocationName({\n            display_name: 'Your Location'\n          });\n        }\n        setLocationStatus('gps_detected');\n        setIsLocationUpdating(false);\n        resolve(location);\n      }, error => {\n        setLocationStatus('failed');\n        setIsLocationUpdating(false);\n        reject(error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 12000,\n        maximumAge: 0 // CRITICAL FIX: Forces a fresh location reading\n      });\n    });\n  }, []);\n  const fetchDashboardData = useCallback(async (locationData = null) => {\n    if (!user || !user.user_id) {\n      navigate('/login');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    const controller = new AbortController();\n    abortControllerRef.current = controller;\n    try {\n      const url = new URL(`${API_BASE_URL}/api/dashboard/`);\n      url.searchParams.append('user_id', user.user_id);\n      if (locationData) {\n        url.searchParams.append('lat', locationData.lat.toString());\n        url.searchParams.append('lng', locationData.lng.toString());\n      }\n      const response = await fetch(url, {\n        signal: controller.signal\n      });\n      if (!response.ok) {\n        const errData = await response.json();\n        if (errData.redirect_to) navigate(errData.redirect_to);\n        throw new Error(errData.error || `HTTP ${response.status}`);\n      }\n      const data = await response.json();\n      setHealthData(data.health_data);\n      processDashboardData(data, locationData);\n      setLastUpdateTime(new Date());\n    } catch (error) {\n      if (error.name !== 'AbortError') setError(\"Failed to load dashboard. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [user, navigate, API_BASE_URL, processDashboardData]);\n\n  // ===== INITIALIZATION (STREAMLINED AND CORRECTED) =====\n  useEffect(() => {\n    const initializeDashboard = async () => {\n      let locationData = null;\n      try {\n        locationData = await getUserLocation();\n      } catch (locationError) {\n        console.warn('📍 Could not get GPS location:', locationError.message);\n        setLocationStatus('failed');\n      } finally {\n        if (user) {\n          await fetchDashboardData(locationData);\n        }\n      }\n    };\n    initializeDashboard();\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [user, getUserLocation, fetchDashboardData]);\n\n  // (Your useMemo hooks and other handlers are correct)\n\n  if (loading && !dashboardData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Dashboard...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"user-info\",\n        children: [\"\\uD83D\\uDC64 \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: user ? user.name : 'User'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-container\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"welcome-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Welcome, \", user ? user.name : 'Guest', \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"YrkQaktvBkRq1tiHTYivQm2zsEo=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c5 = Dashboard;\nexport default Dashboard;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"LazyMap$React.lazy\");\n$RefreshReg$(_c2, \"LazyMap\");\n$RefreshReg$(_c3, \"LazyChart$React.lazy\");\n$RefreshReg$(_c4, \"LazyChart\");\n$RefreshReg$(_c5, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","useNavigate","Link","logoImage","useAuth","jsxDEV","_jsxDEV","LazyMap","lazy","_c","_c2","LazyChart","_c3","_c4","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","getLocationName","lat","lng","response","fetch","data","json","display_name","city","address","state","country","Dashboard","_s","user","logout","selectedParameter","setSelectedParameter","isMenuOpen","setIsMenuOpen","dashboardData","setDashboardData","userLocation","setUserLocation","userLocationName","setUserLocationName","nearestStationInfo","setNearestStationInfo","currentDataInfo","setCurrentDataInfo","locationStatus","setLocationStatus","loading","setLoading","error","setError","isLocationUpdating","setIsLocationUpdating","lastUpdateTime","setLastUpdateTime","Date","healthData","setHealthData","isMobileView","setIsMobileView","window","innerWidth","navigate","API_BASE_URL","process","env","NODE_ENV","abortControllerRef","processDashboardData","locationData","console","log","getUserLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","location","coords","latitude","longitude","accuracy","name","enableHighAccuracy","timeout","maximumAge","fetchDashboardData","user_id","controller","AbortController","current","url","URL","searchParams","append","toString","signal","ok","errData","redirect_to","status","health_data","initializeDashboard","locationError","warn","message","abort","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c5","$RefreshReg$"],"sources":["C:/Users/arathy/Downloads/aiiot-main/aiiot-main/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './css/Dashboard.css';\nimport logoImage from '../assets/aqi.webp';\nimport { useAuth } from '../App';\n\n// Lazy loading components\nconst LazyMap = React.lazy(() => import('./LazyMap'));\nconst LazyChart = React.lazy(() => import('./LazyChart'));\n\n// --- ALL HELPER FUNCTIONS (Your existing helpers are correct) ---\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n\nconst getLocationName = async (lat, lng) => {\n    // This is a simplified placeholder. Your complex getLocationName function is good.\n    try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\n        const data = await response.json();\n        return { display_name: data.display_name || 'Unknown Location', city: data.address.city || 'Unknown' };\n    } catch {\n        return { display_name: 'Your Location', city: 'Unknown', state: 'Kerala', country: 'India' };\n    }\n};\n\nfunction Dashboard() {\n    // ===== STATE MANAGEMENT =====\n    const { user, logout } = useAuth();\n\n    const [selectedParameter, setSelectedParameter] = useState('pm25');\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [dashboardData, setDashboardData] = useState(null);\n    const [userLocation, setUserLocation] = useState(null);\n    const [userLocationName, setUserLocationName] = useState(null);\n    const [nearestStationInfo, setNearestStationInfo] = useState(null);\n    const [currentDataInfo, setCurrentDataInfo] = useState(null);\n    const [locationStatus, setLocationStatus] = useState('initializing');\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isLocationUpdating, setIsLocationUpdating] = useState(false);\n    const [lastUpdateTime, setLastUpdateTime] = useState(new Date());\n    const [healthData, setHealthData] = useState(null);\n    const [isMobileView, setIsMobileView] = useState(window.innerWidth <= 768);\n\n    const navigate = useNavigate();\n    const API_BASE_URL = process.env.NODE_ENV === 'production'\n        ? 'https://airaware-app-gcw7.onrender.com'\n        : 'http://localhost:8000';\n    const abortControllerRef = useRef(null);\n\n    // ===== FUNCTION DEFINITIONS (CORRECT ORDER) =====\n\n    const processDashboardData = useCallback((data, locationData) => {\n        setDashboardData(data);\n        console.log('📊 Dashboard data processed successfully');\n    }, [userLocationName]);\n\n    const getUserLocation = useCallback(() => {\n        return new Promise((resolve, reject) => {\n            if (!navigator.geolocation) {\n                return reject(new Error('Geolocation not supported.'));\n            }\n            setLocationStatus('detecting');\n            setIsLocationUpdating(true);\n            navigator.geolocation.getCurrentPosition(\n                async (position) => {\n                    const location = { lat: position.coords.latitude, lng: position.coords.longitude, accuracy: position.coords.accuracy };\n                    setUserLocation(location);\n                    try {\n                        const name = await getLocationName(location.lat, location.lng);\n                        setUserLocationName(name);\n                    } catch {\n                        setUserLocationName({ display_name: 'Your Location' });\n                    }\n                    setLocationStatus('gps_detected');\n                    setIsLocationUpdating(false);\n                    resolve(location);\n                },\n                (error) => {\n                    setLocationStatus('failed');\n                    setIsLocationUpdating(false);\n                    reject(error);\n                },\n                {\n                    enableHighAccuracy: true,\n                    timeout: 12000,\n                    maximumAge: 0 // CRITICAL FIX: Forces a fresh location reading\n                }\n            );\n        });\n    }, []);\n\n    const fetchDashboardData = useCallback(async (locationData = null) => {\n        if (!user || !user.user_id) {\n            navigate('/login');\n            return;\n        }\n        setLoading(true);\n        setError(null);\n        const controller = new AbortController();\n        abortControllerRef.current = controller;\n        try {\n            const url = new URL(`${API_BASE_URL}/api/dashboard/`);\n            url.searchParams.append('user_id', user.user_id);\n            if (locationData) {\n                url.searchParams.append('lat', locationData.lat.toString());\n                url.searchParams.append('lng', locationData.lng.toString());\n            }\n            const response = await fetch(url, { signal: controller.signal });\n            if (!response.ok) {\n                const errData = await response.json();\n                if (errData.redirect_to) navigate(errData.redirect_to);\n                throw new Error(errData.error || `HTTP ${response.status}`);\n            }\n            const data = await response.json();\n            setHealthData(data.health_data);\n            processDashboardData(data, locationData);\n            setLastUpdateTime(new Date());\n        } catch (error) {\n            if (error.name !== 'AbortError') setError(\"Failed to load dashboard. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    }, [user, navigate, API_BASE_URL, processDashboardData]);\n\n    // ===== INITIALIZATION (STREAMLINED AND CORRECTED) =====\n    useEffect(() => {\n        const initializeDashboard = async () => {\n            let locationData = null;\n            try {\n                locationData = await getUserLocation();\n            } catch (locationError) {\n                console.warn('📍 Could not get GPS location:', locationError.message);\n                setLocationStatus('failed');\n            } finally {\n                if (user) {\n                    await fetchDashboardData(locationData);\n                }\n            }\n        };\n\n        initializeDashboard();\n\n        return () => {\n            if (abortControllerRef.current) {\n                abortControllerRef.current.abort();\n            }\n        };\n    }, [user, getUserLocation, fetchDashboardData]);\n    \n    // (Your useMemo hooks and other handlers are correct)\n    \n    if (loading && !dashboardData) {\n        return <div>Loading Dashboard...</div>;\n    }\n\n    return (\n        <div className=\"dashboard-page\">\n            {/* ... Your entire JSX from the previous step goes here ... */}\n            {/* It was already correct and does not need any changes. */}\n            <nav className=\"navbar\">\n                <li className=\"user-info\">👤 <span>{user ? user.name : 'User'}</span></li>\n            </nav>\n            <main className=\"main-container\">\n                <header className=\"welcome-header\">\n                    <h1>Welcome, {user ? user.name : 'Guest'}!</h1>\n                </header>\n            </main>\n            <footer className=\"footer\">\n            </footer>\n        </div>\n    );\n}\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}