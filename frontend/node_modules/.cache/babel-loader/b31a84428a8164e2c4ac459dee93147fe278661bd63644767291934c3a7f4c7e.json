{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './css/MapPage.css';\n\n// Helper function to get AQI color\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getAQIColor = aqi => {\n  if (aqi === null || aqi === undefined) return '#6b7280';\n  if (aqi <= 50) return '#10b981';\n  if (aqi <= 100) return '#f59e0b';\n  if (aqi <= 150) return '#ef4444';\n  if (aqi <= 200) return '#dc2626';\n  if (aqi <= 300) return '#7c2d12';\n  return '#4c1d95';\n};\n\n// Main Component\nconst MapPage = () => {\n  _s();\n  // State for the map, data, and loading status\n  const [map, setMap] = useState(null);\n  const [stations, setStations] = useState({});\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef({});\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Effect 1: Load Leaflet library and initialize the map. This runs only once.\n  useEffect(() => {\n    let isMounted = true;\n    console.log(\"MapPage: Starting map initialization.\");\n\n    // Function to load the Leaflet script and CSS\n    const loadLeaflet = () => {\n      return new Promise((resolve, reject) => {\n        if (window.L) {\n          console.log(\"MapPage: Leaflet library already available.\");\n          resolve(window.L);\n          return;\n        }\n        console.log(\"MapPage: Loading Leaflet library...\");\n        const link = document.createElement('link');\n        link.rel = \"stylesheet\";\n        link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\n        document.head.appendChild(link);\n        const script = document.createElement('script');\n        script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\n        script.async = true;\n        document.head.appendChild(script);\n        script.onload = () => {\n          if (isMounted) {\n            console.log(\"MapPage: Leaflet library loaded successfully.\");\n            resolve(window.L);\n          }\n        };\n        script.onerror = () => {\n          if (isMounted) {\n            console.error(\"MapPage: Failed to load Leaflet script.\");\n            reject(new Error(\"Failed to load map library. Check internet connection.\"));\n          }\n        };\n      });\n    };\n\n    // Main initialization sequence\n    const initialize = async () => {\n      try {\n        const L = await loadLeaflet();\n        if (isMounted && mapRef.current && !mapRef.current._leaflet_id) {\n          console.log(\"MapPage: Initializing map instance...\");\n          const mapInstance = L.map(mapRef.current).setView([10.176, 76.430], 15);\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);\n          setMap(mapInstance);\n          console.log(\"MapPage: Map instance created. It will now trigger data fetching.\");\n        }\n      } catch (err) {\n        if (isMounted) setError(err.message);\n      }\n    };\n    initialize();\n    return () => {\n      isMounted = false;\n    };\n  }, []); // Empty dependency array ensures this runs only once\n\n  // Effect 2: Fetch data once the map object is available\n  useEffect(() => {\n    if (!map) {\n      console.log(\"MapPage: Waiting for map instance to fetch data...\");\n      return;\n    }\n    let isMounted = true;\n    const fetchData = async () => {\n      setIsLoading(true);\n      setError(null);\n      console.log(\"MapPage: Map is ready. Fetching station data...\");\n      try {\n        const response = await fetch(`${API_BASE_URL}/api/map/`);\n        if (!response.ok) {\n          throw new Error(`Server error: ${response.status}. Please check the backend.`);\n        }\n        const data = await response.json();\n        if (data && data.stations) {\n          console.log(\"MapPage: Station data fetched successfully.\");\n          if (isMounted) setStations(data.stations);\n        } else {\n          throw new Error('Received invalid data from server.');\n        }\n      } catch (err) {\n        console.error(\"Fetch data error:\", err);\n        if (isMounted) setError(err.message);\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 300000); // Refresh every 5 minutes\n\n    return () => {\n      isMounted = false;\n      clearInterval(interval);\n    };\n  }, [map, API_BASE_URL]);\n\n  // Effect 3: Update map markers when station data is updated\n  useEffect(() => {\n    if (!map || Object.keys(stations).length === 0) return;\n    Object.entries(stations).forEach(([id, station]) => {\n      var _station$station_info, _station$station_info2;\n      if (!(station !== null && station !== void 0 && (_station$station_info = station.station_info) !== null && _station$station_info !== void 0 && _station$station_info.lat) || !(station !== null && station !== void 0 && (_station$station_info2 = station.station_info) !== null && _station$station_info2 !== void 0 && _station$station_info2.lng)) return;\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\n      if (markersRef.current[id]) {\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\n        markersRef.current[id].setStyle({\n          fillColor: getAQIColor(aqi)\n        });\n      } else {\n        const marker = window.L.circleMarker([lat, lng], {\n          radius: 15,\n          fillColor: getAQIColor(aqi),\n          color: '#ffffff',\n          weight: 3,\n          opacity: 1,\n          fillOpacity: 0.8\n        }).addTo(map);\n        marker.bindPopup(popupContent);\n        marker.on('click', () => setSelectedStationId(id));\n        markersRef.current[id] = marker;\n      }\n    });\n  }, [map, stations]);\n  const selectedStationData = stations[selectedStationId];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        ref: mapRef,\n        className: \"map-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-loading-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-panel open\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }, this), !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-selector\",\n            children: Object.keys(stations).length > 0 ? Object.keys(stations).map(stationId => {\n              var _stations$stationId, _stations$stationId$s;\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `station-btn ${selectedStationId === stationId ? 'active' : ''}`,\n                onClick: () => setSelectedStationId(stationId),\n                children: ((_stations$stationId = stations[stationId]) === null || _stations$stationId === void 0 ? void 0 : (_stations$stationId$s = _stations$stationId.station_info) === null || _stations$stationId$s === void 0 ? void 0 : _stations$stationId$s.name) || stationId\n              }, stationId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 25\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading stations...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: selectedStationData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"aqi-overview\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aqi-value\",\n                style: {\n                  color: getAQIColor(selectedStationData.highest_sub_index)\n                },\n                children: Math.round(selectedStationData.highest_sub_index) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aqi-status-text\",\n                children: [\"Air Quality Index (\", selectedStationData.aqi_status || 'Unknown', \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metrics-grid\",\n              children: ['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => {\n                var _selectedStationData$;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-label\",\n                    children: key.toUpperCase()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-value\",\n                    children: (_selectedStationData$ = selectedStationData.averages) !== null && _selectedStationData$ !== void 0 && _selectedStationData$[key] ? Math.round(selectedStationData.averages[key]) : '--'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 29\n                  }, this)]\n                }, key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast-title\",\n                children: \"5-Day Forecast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 25\n              }, this), selectedStationData.forecast_data && selectedStationData.forecast_data.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '200px'\n                },\n                children: /*#__PURE__*/_jsxDEV(Line, {\n                  data: {\n                    labels: selectedStationData.forecast_data.map(d => d.day),\n                    datasets: [{\n                      label: 'PM2.5 Forecast',\n                      data: selectedStationData.forecast_data.map(d => d.pm25_max),\n                      borderColor: '#3b82f6',\n                      backgroundColor: 'rgba(59, 130, 246, 0.2)',\n                      tension: 0.1\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    legend: {\n                      display: false\n                    },\n                    scales: {\n                      yAxes: [{\n                        ticks: {\n                          fontColor: '#94a3b8',\n                          beginAtZero: true\n                        }\n                      }],\n                      xAxes: [{\n                        ticks: {\n                          fontColor: '#94a3b8'\n                        }\n                      }]\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 27\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Forecast data is not available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\",\n            style: {\n              margin: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"iXyWdVrFUEYS4TM/fLDRRyI9P2s=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","getAQIColor","aqi","undefined","MapPage","_s","map","setMap","stations","setStations","selectedStationId","setSelectedStationId","isLoading","setIsLoading","error","setError","mapRef","markersRef","API_BASE_URL","process","env","REACT_APP_API_URL","isMounted","console","log","loadLeaflet","Promise","resolve","reject","window","L","link","document","createElement","rel","href","head","appendChild","script","src","async","onload","onerror","Error","initialize","current","_leaflet_id","mapInstance","setView","tileLayer","addTo","err","message","fetchData","response","fetch","ok","status","data","json","interval","setInterval","clearInterval","Object","keys","length","entries","forEach","id","station","_station$station_info","_station$station_info2","station_info","lat","lng","highest_sub_index","popupContent","name","Math","round","setLatLng","setPopupContent","setStyle","fillColor","marker","circleMarker","radius","color","weight","opacity","fillOpacity","bindPopup","on","selectedStationData","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","stationId","_stations$stationId","_stations$stationId$s","onClick","style","aqi_status","key","_selectedStationData$","toUpperCase","averages","forecast_data","height","labels","d","day","datasets","label","pm25_max","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","legend","display","scales","yAxes","ticks","fontColor","beginAtZero","xAxes","margin","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './css/MapPage.css';\r\n\r\n// Helper function to get AQI color\r\nconst getAQIColor = (aqi) => {\r\n  if (aqi === null || aqi === undefined) return '#6b7280';\r\n  if (aqi <= 50) return '#10b981';\r\n  if (aqi <= 100) return '#f59e0b';\r\n  if (aqi <= 150) return '#ef4444';\r\n  if (aqi <= 200) return '#dc2626';\r\n  if (aqi <= 300) return '#7c2d12';\r\n  return '#4c1d95';\r\n};\r\n\r\n// Main Component\r\nconst MapPage = () => {\r\n  // State for the map, data, and loading status\r\n  const [map, setMap] = useState(null);\r\n  const [stations, setStations] = useState({});\r\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const mapRef = useRef(null);\r\n  const markersRef = useRef({});\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  // Effect 1: Load Leaflet library and initialize the map. This runs only once.\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    console.log(\"MapPage: Starting map initialization.\");\r\n\r\n    // Function to load the Leaflet script and CSS\r\n    const loadLeaflet = () => {\r\n      return new Promise((resolve, reject) => {\r\n        if (window.L) {\r\n          console.log(\"MapPage: Leaflet library already available.\");\r\n          resolve(window.L);\r\n          return;\r\n        }\r\n        console.log(\"MapPage: Loading Leaflet library...\");\r\n\r\n        const link = document.createElement('link');\r\n        link.rel = \"stylesheet\";\r\n        link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\r\n        document.head.appendChild(link);\r\n\r\n        const script = document.createElement('script');\r\n        script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\r\n        script.async = true;\r\n        document.head.appendChild(script);\r\n\r\n        script.onload = () => {\r\n          if (isMounted) {\r\n            console.log(\"MapPage: Leaflet library loaded successfully.\");\r\n            resolve(window.L);\r\n          }\r\n        };\r\n        script.onerror = () => {\r\n          if (isMounted) {\r\n            console.error(\"MapPage: Failed to load Leaflet script.\");\r\n            reject(new Error(\"Failed to load map library. Check internet connection.\"));\r\n          }\r\n        };\r\n      });\r\n    };\r\n\r\n    // Main initialization sequence\r\n    const initialize = async () => {\r\n      try {\r\n        const L = await loadLeaflet();\r\n        if (isMounted && mapRef.current && !mapRef.current._leaflet_id) {\r\n          console.log(\"MapPage: Initializing map instance...\");\r\n          const mapInstance = L.map(mapRef.current).setView([10.176, 76.430], 15);\r\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);\r\n          setMap(mapInstance);\r\n          console.log(\"MapPage: Map instance created. It will now trigger data fetching.\");\r\n        }\r\n      } catch (err) {\r\n        if (isMounted) setError(err.message);\r\n      }\r\n    };\r\n\r\n    initialize();\r\n    return () => { isMounted = false; };\r\n  }, []); // Empty dependency array ensures this runs only once\r\n\r\n  // Effect 2: Fetch data once the map object is available\r\n  useEffect(() => {\r\n    if (!map) {\r\n      console.log(\"MapPage: Waiting for map instance to fetch data...\");\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      console.log(\"MapPage: Map is ready. Fetching station data...\");\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/api/map/`);\r\n        if (!response.ok) {\r\n          throw new Error(`Server error: ${response.status}. Please check the backend.`);\r\n        }\r\n        const data = await response.json();\r\n        if (data && data.stations) {\r\n          console.log(\"MapPage: Station data fetched successfully.\");\r\n          if (isMounted) setStations(data.stations);\r\n        } else {\r\n          throw new Error('Received invalid data from server.');\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Fetch data error:\", err);\r\n        if (isMounted) setError(err.message);\r\n      } finally {\r\n        if (isMounted) setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 300000); // Refresh every 5 minutes\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      clearInterval(interval);\r\n    };\r\n  }, [map, API_BASE_URL]);\r\n\r\n  // Effect 3: Update map markers when station data is updated\r\n  useEffect(() => {\r\n    if (!map || Object.keys(stations).length === 0) return;\r\n\r\n    Object.entries(stations).forEach(([id, station]) => {\r\n      if (!station?.station_info?.lat || !station?.station_info?.lng) return;\r\n\r\n      const { lat, lng } = station.station_info;\r\n      const aqi = station.highest_sub_index;\r\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\r\n\r\n      if (markersRef.current[id]) {\r\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\r\n        markersRef.current[id].setStyle({ fillColor: getAQIColor(aqi) });\r\n      } else {\r\n        const marker = window.L.circleMarker([lat, lng], {\r\n          radius: 15,\r\n          fillColor: getAQIColor(aqi),\r\n          color: '#ffffff',\r\n          weight: 3,\r\n          opacity: 1,\r\n          fillOpacity: 0.8\r\n        }).addTo(map);\r\n        marker.bindPopup(popupContent);\r\n        marker.on('click', () => setSelectedStationId(id));\r\n        markersRef.current[id] = marker;\r\n      }\r\n    });\r\n  }, [map, stations]);\r\n\r\n  const selectedStationData = stations[selectedStationId];\r\n\r\n  return (\r\n    <div className=\"map-page\">\r\n      <div className=\"map-container\">\r\n        <div id=\"map\" ref={mapRef} className=\"map-element\"></div>\r\n        {/* Show a loading overlay only when fetching data, not for the initial map load */}\r\n        {isLoading && (\r\n            <div className=\"map-loading-overlay\">\r\n                <div className=\"loading-spinner\"></div>\r\n            </div>\r\n        )}\r\n      </div>\r\n      <div className=\"details-panel open\">\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {!error && (\r\n            <>\r\n                <div className=\"panel-header\">\r\n                  <div className=\"station-selector\">\r\n                    {Object.keys(stations).length > 0 ? (\r\n                      Object.keys(stations).map(stationId => (\r\n                        <button\r\n                          key={stationId}\r\n                          className={`station-btn ${selectedStationId === stationId ? 'active' : ''}`}\r\n                          onClick={() => setSelectedStationId(stationId)}\r\n                        >\r\n                          {stations[stationId]?.station_info?.name || stationId}\r\n                        </button>\r\n                      ))\r\n                    ) : (\r\n                        <p>Loading stations...</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className=\"panel-content\">\r\n                  {selectedStationData ? (\r\n                    <>\r\n                      <div className=\"aqi-overview\">\r\n                        <div className=\"aqi-value\" style={{ color: getAQIColor(selectedStationData.highest_sub_index) }}>\r\n                          {Math.round(selectedStationData.highest_sub_index) || 'N/A'}\r\n                        </div>\r\n                        <div className=\"aqi-status-text\">Air Quality Index ({selectedStationData.aqi_status || 'Unknown'})</div>\r\n                      </div>\r\n                      <div className=\"metrics-grid\">\r\n                        {['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => (\r\n                          <div key={key} className=\"metric-card\">\r\n                            <div className=\"metric-label\">{key.toUpperCase()}</div>\r\n                            <div className=\"metric-value\">{selectedStationData.averages?.[key] ? Math.round(selectedStationData.averages[key]) : '--'}</div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                      <div className=\"forecast-section\">\r\n                        <div className=\"forecast-title\">5-Day Forecast</div>\r\n                        {selectedStationData.forecast_data && selectedStationData.forecast_data.length > 0 ? (\r\n                          <div style={{ height: '200px' }}>\r\n                            <Line\r\n                              data={{\r\n                                labels: selectedStationData.forecast_data.map(d => d.day),\r\n                                datasets: [{\r\n                                  label: 'PM2.5 Forecast',\r\n                                  data: selectedStationData.forecast_data.map(d => d.pm25_max),\r\n                                  borderColor: '#3b82f6',\r\n                                  backgroundColor: 'rgba(59, 130, 246, 0.2)',\r\n                                  tension: 0.1\r\n                                }]\r\n                              }}\r\n                              options={{\r\n                                responsive: true,\r\n                                maintainAspectRatio: false,\r\n                                legend: { display: false },\r\n                                scales: {\r\n                                  yAxes: [{ ticks: { fontColor: '#94a3b8', beginAtZero: true } }],\r\n                                  xAxes: [{ ticks: { fontColor: '#94a3b8' } }]\r\n                                }\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <p>Forecast data is not available.</p>\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <div className=\"loading-spinner\" style={{ margin: 'auto' }}></div>\r\n                  )}\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}