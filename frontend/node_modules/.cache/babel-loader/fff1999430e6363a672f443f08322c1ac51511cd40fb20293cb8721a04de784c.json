{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\LazyChart.js\",\n  _s = $RefreshSig$();\n// components/LazyChart.js\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LazyChart = ({\n  dashboardData,\n  selectedParameter,\n  fallbackData\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // Only initialize if Chart.js is available\n    if (!window.Chart) {\n      return;\n    }\n    const initChart = () => {\n      try {\n        var _dashboardData$foreca;\n        // Clean up existing chart\n        if (chartRef.current) {\n          chartRef.current.destroy();\n          chartRef.current = null;\n        }\n        if (!canvasRef.current) {\n          return;\n        }\n\n        // Get forecast data\n        const forecastData = (dashboardData === null || dashboardData === void 0 ? void 0 : (_dashboardData$foreca = dashboardData.forecast_data) === null || _dashboardData$foreca === void 0 ? void 0 : _dashboardData$foreca.nearest_station) || fallbackData.forecast_data.nearest_station;\n        const data = forecastData.map(item => item[`${selectedParameter}_max`] || 0);\n        const labels = forecastData.map(item => item.day);\n        const ctx = canvasRef.current.getContext('2d');\n        chartRef.current = new window.Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: selectedParameter.toUpperCase(),\n              data: data,\n              borderColor: '#3b82f6',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              tension: 0.4,\n              fill: true,\n              pointBackgroundColor: '#3b82f6',\n              pointBorderColor: '#ffffff',\n              pointBorderWidth: 2,\n              pointRadius: 5\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            interaction: {\n              intersect: false,\n              mode: 'index'\n            },\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                grid: {\n                  color: 'rgba(0, 0, 0, 0.1)'\n                },\n                title: {\n                  display: true,\n                  text: 'Concentration (µg/m³)'\n                }\n              },\n              x: {\n                grid: {\n                  color: 'rgba(0, 0, 0, 0.1)'\n                }\n              }\n            }\n          }\n        });\n        console.log('✅ Lazy chart initialized');\n      } catch (error) {\n        console.error('❌ Lazy chart initialization failed:', error);\n      }\n    };\n\n    // Initialize chart with a small delay\n    setTimeout(initChart, 100);\n    return () => {\n      if (chartRef.current) {\n        try {\n          chartRef.current.destroy();\n        } catch (e) {}\n        chartRef.current = null;\n      }\n    };\n  }, [dashboardData, selectedParameter, fallbackData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '200px',\n      marginTop: '15px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        background: 'white',\n        borderRadius: '8px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(LazyChart, \"INC2sQwyd6LmrwJnmQblTTo+H+w=\");\n_c = LazyChart;\nexport default LazyChart;\nvar _c;\n$RefreshReg$(_c, \"LazyChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","LazyChart","dashboardData","selectedParameter","fallbackData","_s","chartRef","canvasRef","window","Chart","initChart","_dashboardData$foreca","current","destroy","forecastData","forecast_data","nearest_station","data","map","item","labels","day","ctx","getContext","type","datasets","label","toUpperCase","borderColor","backgroundColor","tension","fill","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","options","responsive","maintainAspectRatio","interaction","intersect","mode","plugins","legend","display","position","scales","y","beginAtZero","grid","color","title","text","x","console","log","error","setTimeout","e","style","height","marginTop","children","ref","width","background","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/LazyChart.js"],"sourcesContent":["// components/LazyChart.js\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst LazyChart = ({ dashboardData, selectedParameter, fallbackData }) => {\r\n  const chartRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Only initialize if Chart.js is available\r\n    if (!window.Chart) {\r\n      return;\r\n    }\r\n\r\n    const initChart = () => {\r\n      try {\r\n        // Clean up existing chart\r\n        if (chartRef.current) {\r\n          chartRef.current.destroy();\r\n          chartRef.current = null;\r\n        }\r\n\r\n        if (!canvasRef.current) {\r\n          return;\r\n        }\r\n\r\n        // Get forecast data\r\n        const forecastData = dashboardData?.forecast_data?.nearest_station || \r\n                           fallbackData.forecast_data.nearest_station;\r\n        \r\n        const data = forecastData.map(item => item[`${selectedParameter}_max`] || 0);\r\n        const labels = forecastData.map(item => item.day);\r\n\r\n        const ctx = canvasRef.current.getContext('2d');\r\n        chartRef.current = new window.Chart(ctx, {\r\n          type: 'line',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [{\r\n              label: selectedParameter.toUpperCase(),\r\n              data: data,\r\n              borderColor: '#3b82f6',\r\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n              tension: 0.4,\r\n              fill: true,\r\n              pointBackgroundColor: '#3b82f6',\r\n              pointBorderColor: '#ffffff',\r\n              pointBorderWidth: 2,\r\n              pointRadius: 5\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            interaction: {\r\n              intersect: false,\r\n              mode: 'index'\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n                position: 'top'\r\n              }\r\n            },\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                grid: {\r\n                  color: 'rgba(0, 0, 0, 0.1)'\r\n                },\r\n                title: {\r\n                  display: true,\r\n                  text: 'Concentration (µg/m³)'\r\n                }\r\n              },\r\n              x: {\r\n                grid: {\r\n                  color: 'rgba(0, 0, 0, 0.1)'\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        console.log('✅ Lazy chart initialized');\r\n\r\n      } catch (error) {\r\n        console.error('❌ Lazy chart initialization failed:', error);\r\n      }\r\n    };\r\n\r\n    // Initialize chart with a small delay\r\n    setTimeout(initChart, 100);\r\n\r\n    return () => {\r\n      if (chartRef.current) {\r\n        try {\r\n          chartRef.current.destroy();\r\n        } catch (e) {}\r\n        chartRef.current = null;\r\n      }\r\n    };\r\n  }, [dashboardData, selectedParameter, fallbackData]);\r\n\r\n  return (\r\n    <div style={{ height: '200px', marginTop: '15px' }}>\r\n      <canvas \r\n        ref={canvasRef}\r\n        style={{ \r\n          width: '100%', \r\n          height: '100%',\r\n          background: 'white',\r\n          borderRadius: '8px'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LazyChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}