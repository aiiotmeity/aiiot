{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { useAuth } from '../App';\nimport './css/MapPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst getAQIColor = aqi => {/* ... color function ... */};\nconst getAQIStatus = aqi => {/* ... status function ... */};\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst MapPage = () => {\n  _s();\n  var _stations$nearestStat, _stations$nearestStat2;\n  const [mapInstance, setMapInstance] = useState(null);\n  const [stations, setStations] = useState({});\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const [forecastData, setForecastData] = useState([]);\n  const [isForecastLoading, setIsForecastLoading] = useState(false);\n  const [selectedParameter, setSelectedParameter] = useState('pm25_max');\n\n  // State for User Location & Interpolation\n  const [userLocation, setUserLocation] = useState(null);\n  const [interpolatedData, setInterpolatedData] = useState(null);\n  const [nearestStation, setNearestStation] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef({});\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  useEffect(() => {\n    let map;\n    if (mapRef.current && !mapRef.current._leaflet_id) {\n      map = window.L.map(mapRef.current).setView([10.176, 76.430], 13);\n      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n      setMapInstance(map);\n    }\n    return () => {\n      if (map) map.remove();\n    };\n  }, []);\n  useEffect(() => {\n    if (user && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => setUserLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }), err => console.warn(`Geolocation error: ${err.message}`));\n    }\n  }, [user]);\n  const fetchRealtimeData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\n      const data = await response.json();\n      setStations(data.stations);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [API_BASE_URL]);\n  useEffect(() => {\n    fetchRealtimeData();\n    const interval = setInterval(fetchRealtimeData, 60000);\n    return () => clearInterval(interval);\n  }, [fetchRealtimeData]);\n  useEffect(() => {\n    if (userLocation && Object.keys(stations).length > 0) {\n      let weightedSum = 0,\n        weightSum = 0,\n        nearestDist = Infinity,\n        nearestId = null;\n      Object.entries(stations).forEach(([id, station]) => {\n        const dist = calculateDistance(userLocation.lat, userLocation.lng, station.station_info.lat, station.station_info.lng);\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          nearestId = id;\n        }\n        const weight = 1 / Math.pow(dist === 0 ? 0.001 : dist, 2);\n        weightedSum += (station.highest_sub_index || 0) * weight;\n        weightSum += weight;\n      });\n      setNearestStation({\n        id: nearestId,\n        distance: nearestDist\n      });\n      if (weightSum > 0) setInterpolatedData({\n        aqi: Math.round(weightedSum / weightSum)\n      });\n    }\n  }, [userLocation, stations]);\n  useEffect(() => {\n    if (!selectedStationId) return;\n    const fetchForecast = async () => {/* ... fetch forecast logic ... */};\n    fetchForecast();\n  }, [selectedStationId, API_BASE_URL]);\n  useEffect(() => {\n    if (!mapInstance || Object.keys(stations).length === 0) return;\n    Object.values(markersRef.current).forEach(marker => marker.remove());\n    markersRef.current = {};\n    Object.entries(stations).forEach(([id, station]) => {\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const markerOptions = {\n        radius: selectedStationId === id ? 12 : 8,\n        fillColor: getAQIColor(aqi),\n        color: selectedStationId === id ? '#ffffff' : '#1e293b',\n        weight: selectedStationId === id ? 3 : 1.5,\n        opacity: 1,\n        fillOpacity: 0.85\n      };\n      const marker = window.L.circleMarker([lat, lng], markerOptions).addTo(mapInstance);\n      marker.on('click', () => {\n        setSelectedStationId(id);\n        setIsPanelOpen(true);\n        mapInstance.setView([lat, lng], 15);\n      });\n      markersRef.current[id] = marker;\n    });\n  }, [mapInstance, stations, selectedStationId]);\n  const selectedStationData = stations[selectedStationId];\n  // ... (Memo for chart data and options) ...\n  const pollutants = [/* ... pollutants array ... */];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          ref: mapRef,\n          className: \"map-element\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `details-panel ${isPanelOpen ? 'open' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"panel-toggle\",\n          onClick: () => setIsPanelOpen(!isPanelOpen)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-satellite-dish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 54\n            }, this), \" Monitoring Stations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-selector\",\n            children: Object.entries(stations).map(([id, station]) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `station-btn ${selectedStationId === id ? 'active' : ''}`,\n              onClick: () => setSelectedStationId(id),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"station-btn-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: station.station_info.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"station-aqi\",\n                  style: {\n                    color: getAQIColor(station.highest_sub_index)\n                  },\n                  children: Math.round(station.highest_sub_index) || 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 37\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: [user && interpolatedData && nearestStation && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-location-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-street-view\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 71\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"AQI at Your Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 109\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-aqi-value\",\n                children: nearestStation.distance < 1 ? (_stations$nearestStat = stations[nearestStation.id]) === null || _stations$nearestStat === void 0 ? void 0 : _stations$nearestStat.highest_sub_index : interpolatedData.aqi\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-location-details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: nearestStation.distance < 1 ? 'Using nearest station' : 'Interpolated value'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 132\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Nearest: \", (_stations$nearestStat2 = stations[nearestStation.id]) === null || _stations$nearestStat2 === void 0 ? void 0 : _stations$nearestStat2.station_info.name, \" (\", nearestStation.distance.toFixed(1), \" km)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-loader\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 68\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 38\n          }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this) : selectedStationData ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: selectedStationData.station_info.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Current AQI: \", Math.round(selectedStationData.highest_sub_index), \" (\", getAQIStatus(selectedStationData.highest_sub_index), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pollutant-metrics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(MapPage, \"ATsig9ghrPbQif5K6X6Pis3H+3k=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","Link","useNavigate","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","useAuth","jsxDEV","_jsxDEV","register","getAQIColor","aqi","getAQIStatus","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","MapPage","_s","_stations$nearestStat","_stations$nearestStat2","mapInstance","setMapInstance","stations","setStations","selectedStationId","setSelectedStationId","isLoading","setIsLoading","error","setError","isPanelOpen","setIsPanelOpen","forecastData","setForecastData","isForecastLoading","setIsForecastLoading","selectedParameter","setSelectedParameter","userLocation","setUserLocation","interpolatedData","setInterpolatedData","nearestStation","setNearestStation","mapRef","markersRef","navigate","user","API_BASE_URL","process","env","REACT_APP_API_URL","map","current","_leaflet_id","window","L","setView","tileLayer","addTo","remove","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","err","console","warn","message","fetchRealtimeData","response","fetch","data","json","interval","setInterval","clearInterval","Object","keys","length","weightedSum","weightSum","nearestDist","Infinity","nearestId","entries","forEach","id","station","dist","station_info","weight","pow","highest_sub_index","distance","round","fetchForecast","values","marker","markerOptions","radius","fillColor","color","opacity","fillOpacity","circleMarker","on","selectedStationData","pollutants","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","name","style","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\r\nimport { useAuth } from '../App';\r\nimport './css/MapPage.css';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\r\n\r\nconst getAQIColor = (aqi) => { /* ... color function ... */ };\r\nconst getAQIStatus = (aqi) => { /* ... status function ... */ };\r\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // km\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLon = (lon2 - lon1) * Math.PI / 180;\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n};\r\n\r\nconst MapPage = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [stations, setStations] = useState({});\r\n    const [selectedStationId, setSelectedStationId] = useState('lora-v1');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [isPanelOpen, setIsPanelOpen] = useState(true);\r\n    const [forecastData, setForecastData] = useState([]);\r\n    const [isForecastLoading, setIsForecastLoading] = useState(false);\r\n    const [selectedParameter, setSelectedParameter] = useState('pm25_max');\r\n    \r\n    // State for User Location & Interpolation\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [interpolatedData, setInterpolatedData] = useState(null);\r\n    const [nearestStation, setNearestStation] = useState(null);\r\n\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef({});\r\n    const navigate = useNavigate();\r\n    const { user } = useAuth();\r\n    const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n    useEffect(() => {\r\n        let map;\r\n        if (mapRef.current && !mapRef.current._leaflet_id) {\r\n            map = window.L.map(mapRef.current).setView([10.176, 76.430], 13);\r\n            window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\r\n            setMapInstance(map);\r\n        }\r\n        return () => { if (map) map.remove(); };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (user && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => setUserLocation({ lat: position.coords.latitude, lng: position.coords.longitude }),\r\n                (err) => console.warn(`Geolocation error: ${err.message}`)\r\n            );\r\n        }\r\n    }, [user]);\r\n\r\n    const fetchRealtimeData = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\r\n            const data = await response.json();\r\n            setStations(data.stations);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [API_BASE_URL]);\r\n\r\n    useEffect(() => {\r\n        fetchRealtimeData();\r\n        const interval = setInterval(fetchRealtimeData, 60000);\r\n        return () => clearInterval(interval);\r\n    }, [fetchRealtimeData]);\r\n\r\n    useEffect(() => {\r\n        if (userLocation && Object.keys(stations).length > 0) {\r\n            let weightedSum = 0, weightSum = 0, nearestDist = Infinity, nearestId = null;\r\n            Object.entries(stations).forEach(([id, station]) => {\r\n                const dist = calculateDistance(userLocation.lat, userLocation.lng, station.station_info.lat, station.station_info.lng);\r\n                if (dist < nearestDist) { nearestDist = dist; nearestId = id; }\r\n                const weight = 1 / Math.pow(dist === 0 ? 0.001 : dist, 2);\r\n                weightedSum += (station.highest_sub_index || 0) * weight;\r\n                weightSum += weight;\r\n            });\r\n            setNearestStation({ id: nearestId, distance: nearestDist });\r\n            if (weightSum > 0) setInterpolatedData({ aqi: Math.round(weightedSum / weightSum) });\r\n        }\r\n    }, [userLocation, stations]);\r\n\r\n    useEffect(() => {\r\n        if (!selectedStationId) return;\r\n        const fetchForecast = async () => { /* ... fetch forecast logic ... */ };\r\n        fetchForecast();\r\n    }, [selectedStationId, API_BASE_URL]);\r\n    \r\n    useEffect(() => {\r\n        if (!mapInstance || Object.keys(stations).length === 0) return;\r\n        Object.values(markersRef.current).forEach(marker => marker.remove());\r\n        markersRef.current = {};\r\n        Object.entries(stations).forEach(([id, station]) => {\r\n            const { lat, lng } = station.station_info;\r\n            const aqi = station.highest_sub_index;\r\n            const markerOptions = { radius: selectedStationId === id ? 12 : 8, fillColor: getAQIColor(aqi), color: selectedStationId === id ? '#ffffff' : '#1e293b', weight: selectedStationId === id ? 3 : 1.5, opacity: 1, fillOpacity: 0.85 };\r\n            const marker = window.L.circleMarker([lat, lng], markerOptions).addTo(mapInstance);\r\n            marker.on('click', () => {\r\n                setSelectedStationId(id);\r\n                setIsPanelOpen(true);\r\n                mapInstance.setView([lat, lng], 15);\r\n            });\r\n            markersRef.current[id] = marker;\r\n        });\r\n    }, [mapInstance, stations, selectedStationId]);\r\n\r\n    const selectedStationData = stations[selectedStationId];\r\n    // ... (Memo for chart data and options) ...\r\n    const pollutants = [ /* ... pollutants array ... */ ];\r\n\r\n    return (\r\n        <div className=\"map-page\">\r\n            <nav className=\"navbar\">{/* ... your navbar JSX ... */}</nav>\r\n            <div className=\"main-content\">\r\n                <div className=\"map-container\"><div id=\"map\" ref={mapRef} className=\"map-element\"></div></div>\r\n                <div className={`details-panel ${isPanelOpen ? 'open' : ''}`}>\r\n                    <button className=\"panel-toggle\" onClick={() => setIsPanelOpen(!isPanelOpen)}>{/* ... */}</button>\r\n                    <div className=\"panel-header\">\r\n                         <h2 className=\"panel-title\"><i className=\"fas fa-satellite-dish\"></i> Monitoring Stations</h2>\r\n                         <div className=\"station-selector\">\r\n                            {Object.entries(stations).map(([id, station]) => (\r\n                                <button key={id} className={`station-btn ${selectedStationId === id ? 'active' : ''}`} onClick={() => setSelectedStationId(id)}>\r\n                                    <div className=\"station-btn-content\">\r\n                                        <span>{station.station_info.name}</span>\r\n                                        <span className=\"station-aqi\" style={{ color: getAQIColor(station.highest_sub_index) }}>\r\n                                            {Math.round(station.highest_sub_index) || 'N/A'}\r\n                                        </span>\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"panel-content\">\r\n                        {user && interpolatedData && nearestStation && (\r\n                            <div className=\"user-location-panel\">\r\n                                <div className=\"user-location-header\"><i className=\"fas fa-street-view\"></i><span>AQI at Your Location</span></div>\r\n                                <div className=\"user-location-body\">\r\n                                    <div className=\"user-aqi-value\">{nearestStation.distance < 1 ? stations[nearestStation.id]?.highest_sub_index : interpolatedData.aqi}</div>\r\n                                    <div className=\"user-location-details\">\r\n                                        <span>{nearestStation.distance < 1 ? 'Using nearest station' : 'Interpolated value'}</span><br />\r\n                                        <span>Nearest: {stations[nearestStation.id]?.station_info.name} ({nearestStation.distance.toFixed(1)} km)</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        {isLoading ? <div className=\"panel-loader\"><div className=\"loading-spinner\"></div></div> :\r\n                        error ? <div>Error: {error}</div> :\r\n                        selectedStationData ? (\r\n                            <div>\r\n                                <h3>{selectedStationData.station_info.name}</h3>\r\n                                <p>Current AQI: {Math.round(selectedStationData.highest_sub_index)} ({getAQIStatus(selectedStationData.highest_sub_index)})</p>\r\n                                <div className=\"pollutant-metrics\">{/* ... pollutant grid ... */}</div>\r\n                                <div className=\"forecast-section\">{/* ... forecast chart ... */}</div>\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}