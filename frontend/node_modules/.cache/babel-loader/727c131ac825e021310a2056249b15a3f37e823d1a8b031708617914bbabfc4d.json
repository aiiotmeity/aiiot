{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { useAuth } from '../App';\nimport './css/MapPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\n\n// --- Helper Functions ---\nconst getAQIColor = aqi => {\n  if (aqi === null || aqi === undefined) return '#6b7280';\n  if (aqi <= 50) return '#10b981';\n  if (aqi <= 100) return '#f59e0b';\n  if (aqi <= 200) return '#ef4444';\n  return '#7c2d12';\n};\nconst getAQIStatus = aqi => {\n  if (aqi === null || aqi === undefined) return 'Unknown';\n  if (aqi <= 50) return 'Good';\n  if (aqi <= 100) return 'Moderate';\n  if (aqi <= 150) return 'Unhealthy';\n  if (aqi <= 200) return 'Severe';\n  if (aqi <= 300) return 'Very Severe';\n  return 'Hazardous';\n};\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in km\n};\nconst MapPage = () => {\n  _s();\n  var _stations$nearestStat, _stations$nearestStat2;\n  const [mapInstance, setMapInstance] = useState(null);\n  const [stations, setStations] = useState({});\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const [forecastData, setForecastData] = useState([]);\n  const [isForecastLoading, setIsForecastLoading] = useState(false);\n  const [selectedParameter, setSelectedParameter] = useState('pm25_max');\n  const [forecastUpdatedAt, setForecastUpdatedAt] = useState(null);\n\n  // State for User Location & Interpolation\n  const [userLocation, setUserLocation] = useState(null);\n  const [interpolatedData, setInterpolatedData] = useState(null);\n  const [nearestStation, setNearestStation] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef({});\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Effect for Map Initialization\n  useEffect(() => {\n    let map;\n    if (mapRef.current && !mapRef.current._leaflet_id) {\n      map = window.L.map(mapRef.current).setView([10.176, 76.430], 13);\n      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n      setMapInstance(map);\n    }\n    return () => {\n      if (map) map.remove();\n    };\n  }, []);\n\n  // Effect for User Location Tracking (only for logged-in users)\n  useEffect(() => {\n    if (user && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => setUserLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }), err => console.warn(`Geolocation error: ${err.message}`));\n    }\n  }, [user]);\n\n  // Effect for Fetching Real-time Station Data\n  const fetchRealtimeData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\n      const data = await response.json();\n      setStations(data.stations);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [API_BASE_URL]);\n  useEffect(() => {\n    fetchRealtimeData();\n    const interval = setInterval(fetchRealtimeData, 60000); // Refresh every minute\n    return () => clearInterval(interval);\n  }, [fetchRealtimeData]);\n\n  // Effect for Calculating Interpolated Values\n  useEffect(() => {\n    if (userLocation && Object.keys(stations).length > 0) {\n      let weightedSum = 0,\n        weightSum = 0,\n        nearestDist = Infinity,\n        nearestId = null;\n      Object.entries(stations).forEach(([id, station]) => {\n        const dist = calculateDistance(userLocation.lat, userLocation.lng, station.station_info.lat, station.station_info.lng);\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          nearestId = id;\n        }\n        const weight = 1 / Math.pow(dist === 0 ? 0.001 : dist, 2); // Avoid division by zero\n        weightedSum += (station.highest_sub_index || 0) * weight;\n        weightSum += weight;\n      });\n      setNearestStation({\n        id: nearestId,\n        distance: nearestDist\n      });\n      if (weightSum > 0) setInterpolatedData({\n        aqi: Math.round(weightedSum / weightSum)\n      });\n    }\n  }, [userLocation, stations]);\n\n  // Effect for Fetching Forecast Data\n  useEffect(() => {\n    if (!selectedStationId) return;\n    const fetchForecast = async () => {\n      setIsForecastLoading(true);\n      try {\n        const response = await fetch(`${API_BASE_URL}/api/station/${selectedStationId}/forecast/`);\n        const data = await response.json();\n        setForecastData(data.forecast_data || []);\n        setForecastUpdatedAt(data.forecast_updated_at || null);\n      } catch (err) {\n        console.error(\"Forecast fetch error:\", err);\n      } finally {\n        setIsForecastLoading(false);\n      }\n    };\n    fetchForecast();\n  }, [selectedStationId, API_BASE_URL]);\n\n  // Effect for Drawing Map Markers\n  useEffect(() => {\n    if (!mapInstance || Object.keys(stations).length === 0) return;\n    Object.values(markersRef.current).forEach(marker => marker.remove());\n    markersRef.current = {};\n    Object.entries(stations).forEach(([id, station]) => {\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const markerOptions = {\n        radius: selectedStationId === id ? 12 : 8,\n        fillColor: getAQIColor(aqi),\n        color: selectedStationId === id ? '#ffffff' : '#1e293b',\n        weight: selectedStationId === id ? 3 : 1.5,\n        opacity: 1,\n        fillOpacity: 0.85\n      };\n      const marker = window.L.circleMarker([lat, lng], markerOptions).addTo(mapInstance);\n      marker.on('click', () => {\n        setSelectedStationId(id);\n        setIsPanelOpen(true);\n        mapInstance.setView([lat, lng], 15);\n      });\n      markersRef.current[id] = marker;\n    });\n  }, [mapInstance, stations, selectedStationId]);\n  const selectedStationData = stations[selectedStationId];\n  const pollutants = [{\n    key: 'pm25',\n    name: 'PM2.5'\n  }, {\n    key: 'pm10',\n    name: 'PM10'\n  }, {\n    key: 'so2',\n    name: 'SO₂'\n  }, {\n    key: 'no2',\n    name: 'NO₂'\n  }, {\n    key: 'co',\n    name: 'CO'\n  }, {\n    key: 'o3',\n    name: 'O₃'\n  }, {\n    key: 'nh3',\n    name: 'NH₃'\n  }];\n  const forecastChartData = useMemo(() => {/* ... memoized chart data ... */}, [forecastData, selectedParameter]);\n  const forecastChartOptions = {/* ... chart options ... */};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          ref: mapRef,\n          className: \"map-element\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `details-panel ${isPanelOpen ? 'open' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"panel-toggle\",\n          onClick: () => setIsPanelOpen(!isPanelOpen),\n          title: isPanelOpen ? \"Hide Panel\" : \"Show Panel\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: `fas ${isPanelOpen ? 'fa-chevron-right' : 'fa-chevron-left'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-satellite-dish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 54\n            }, this), \" Monitoring Stations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-selector\",\n            children: Object.entries(stations).map(([id, station]) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `station-btn ${selectedStationId === id ? 'active' : ''}`,\n              onClick: () => setSelectedStationId(id),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"station-btn-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: station.station_info.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"station-aqi\",\n                  style: {\n                    color: getAQIColor(station.highest_sub_index)\n                  },\n                  children: Math.round(station.highest_sub_index) || 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 37\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: [user && interpolatedData && nearestStation && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-location-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-street-view\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 71\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"AQI at Your Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 109\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-aqi-value\",\n                children: nearestStation.distance < 1 ? (_stations$nearestStat = stations[nearestStation.id]) === null || _stations$nearestStat === void 0 ? void 0 : _stations$nearestStat.highest_sub_index : interpolatedData.aqi\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-location-details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: nearestStation.distance < 1 ? 'Using nearest station data' : 'Interpolated value'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 137\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Nearest: \", (_stations$nearestStat2 = stations[nearestStation.id]) === null || _stations$nearestStat2 === void 0 ? void 0 : _stations$nearestStat2.station_info.name, \" (\", nearestStation.distance.toFixed(1), \" km)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-loader\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 68\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 38\n          }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 33\n          }, this) : selectedStationData ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: selectedStationData.station_info.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Current AQI: \", Math.round(selectedStationData.highest_sub_index), \" (\", getAQIStatus(selectedStationData.highest_sub_index), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pollutant-metrics\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pollutant-grid\",\n                children: pollutants.map(p => {\n                  var _selectedStationData$, _selectedStationData$2, _selectedStationData$3;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-card\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"metric-label\",\n                      children: p.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 227,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"metric-value\",\n                      children: [(_selectedStationData$ = (_selectedStationData$2 = selectedStationData.averages) === null || _selectedStationData$2 === void 0 ? void 0 : (_selectedStationData$3 = _selectedStationData$2[p.key]) === null || _selectedStationData$3 === void 0 ? void 0 : _selectedStationData$3.toFixed(2)) !== null && _selectedStationData$ !== void 0 ? _selectedStationData$ : 'N/A', /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"metric-unit\",\n                        children: \" \\xB5g/m\\xB3\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 230,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 228,\n                      columnNumber: 49\n                    }, this)]\n                  }, p.key, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 45\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"forecast-title\",\n                  children: \"4-Day Forecast\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"parameter-selector\",\n                  value: selectedParameter,\n                  onChange: e => setSelectedParameter(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"pm25_max\",\n                    children: \"PM2.5\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"pm10_max\",\n                    children: \"PM10\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"so2_max\",\n                    children: \"SO\\u2082\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 37\n              }, this), forecastUpdatedAt && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '0.75rem',\n                  color: '#94a3b8',\n                  marginBottom: '0.5rem'\n                },\n                children: [\"Updated: \", new Date(forecastUpdatedAt).toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 59\n              }, this), isForecastLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"panel-loader\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Loading forecast...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 88\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 58\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chart-container\",\n                children: /*#__PURE__*/_jsxDEV(Line, {\n                  options: forecastChartOptions,\n                  data: forecastChartData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 70\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(MapPage, \"vvK9PsOk0iAJg7Fp36IAozWT8Qw=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","Link","useNavigate","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","useAuth","jsxDEV","_jsxDEV","register","getAQIColor","aqi","undefined","getAQIStatus","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","MapPage","_s","_stations$nearestStat","_stations$nearestStat2","mapInstance","setMapInstance","stations","setStations","selectedStationId","setSelectedStationId","isLoading","setIsLoading","error","setError","isPanelOpen","setIsPanelOpen","forecastData","setForecastData","isForecastLoading","setIsForecastLoading","selectedParameter","setSelectedParameter","forecastUpdatedAt","setForecastUpdatedAt","userLocation","setUserLocation","interpolatedData","setInterpolatedData","nearestStation","setNearestStation","mapRef","markersRef","navigate","user","API_BASE_URL","process","env","REACT_APP_API_URL","map","current","_leaflet_id","window","L","setView","tileLayer","addTo","remove","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","err","console","warn","message","fetchRealtimeData","response","fetch","data","json","interval","setInterval","clearInterval","Object","keys","length","weightedSum","weightSum","nearestDist","Infinity","nearestId","entries","forEach","id","station","dist","station_info","weight","pow","highest_sub_index","distance","round","fetchForecast","forecast_data","forecast_updated_at","values","marker","markerOptions","radius","fillColor","color","opacity","fillOpacity","circleMarker","on","selectedStationData","pollutants","key","name","forecastChartData","forecastChartOptions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","title","style","toFixed","p","_selectedStationData$","_selectedStationData$2","_selectedStationData$3","averages","value","onChange","e","target","fontSize","marginBottom","Date","toLocaleString","options","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js';\r\nimport { useAuth } from '../App';\r\nimport './css/MapPage.css';\r\n\r\nChartJS.register(\r\n  CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler\r\n);\r\n\r\n// --- Helper Functions ---\r\nconst getAQIColor = (aqi) => {\r\n    if (aqi === null || aqi === undefined) return '#6b7280';\r\n    if (aqi <= 50) return '#10b981';\r\n    if (aqi <= 100) return '#f59e0b';\r\n    if (aqi <= 200) return '#ef4444';\r\n    return '#7c2d12';\r\n};\r\nconst getAQIStatus = (aqi) => {\r\n    if (aqi === null || aqi === undefined) return 'Unknown';\r\n    if (aqi <= 50) return 'Good';\r\n    if (aqi <= 100) return 'Moderate';\r\n    if (aqi <= 150) return 'Unhealthy';\r\n    if (aqi <= 200) return 'Severe';\r\n    if (aqi <= 300) return 'Very Severe';\r\n    return 'Hazardous';\r\n};\r\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // Radius of the Earth in km\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLon = (lon2 - lon1) * Math.PI / 180;\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distance in km\r\n};\r\n\r\nconst MapPage = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [stations, setStations] = useState({});\r\n    const [selectedStationId, setSelectedStationId] = useState('lora-v1');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [isPanelOpen, setIsPanelOpen] = useState(true);\r\n    const [forecastData, setForecastData] = useState([]);\r\n    const [isForecastLoading, setIsForecastLoading] = useState(false);\r\n    const [selectedParameter, setSelectedParameter] = useState('pm25_max');\r\n    const [forecastUpdatedAt, setForecastUpdatedAt] = useState(null);\r\n    \r\n    // State for User Location & Interpolation\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [interpolatedData, setInterpolatedData] = useState(null);\r\n    const [nearestStation, setNearestStation] = useState(null);\r\n\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef({});\r\n    const navigate = useNavigate();\r\n    const { user } = useAuth();\r\n    const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n    // Effect for Map Initialization\r\n    useEffect(() => {\r\n        let map;\r\n        if (mapRef.current && !mapRef.current._leaflet_id) {\r\n            map = window.L.map(mapRef.current).setView([10.176, 76.430], 13);\r\n            window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\r\n            setMapInstance(map);\r\n        }\r\n        return () => { if (map) map.remove(); };\r\n    }, []);\r\n\r\n    // Effect for User Location Tracking (only for logged-in users)\r\n    useEffect(() => {\r\n        if (user && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => setUserLocation({ lat: position.coords.latitude, lng: position.coords.longitude }),\r\n                (err) => console.warn(`Geolocation error: ${err.message}`)\r\n            );\r\n        }\r\n    }, [user]);\r\n\r\n    // Effect for Fetching Real-time Station Data\r\n    const fetchRealtimeData = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/api/map/realtime/`);\r\n            const data = await response.json();\r\n            setStations(data.stations);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [API_BASE_URL]);\r\n\r\n    useEffect(() => {\r\n        fetchRealtimeData();\r\n        const interval = setInterval(fetchRealtimeData, 60000); // Refresh every minute\r\n        return () => clearInterval(interval);\r\n    }, [fetchRealtimeData]);\r\n\r\n    // Effect for Calculating Interpolated Values\r\n    useEffect(() => {\r\n        if (userLocation && Object.keys(stations).length > 0) {\r\n            let weightedSum = 0, weightSum = 0, nearestDist = Infinity, nearestId = null;\r\n            Object.entries(stations).forEach(([id, station]) => {\r\n                const dist = calculateDistance(userLocation.lat, userLocation.lng, station.station_info.lat, station.station_info.lng);\r\n                if (dist < nearestDist) {\r\n                    nearestDist = dist;\r\n                    nearestId = id;\r\n                }\r\n                const weight = 1 / Math.pow(dist === 0 ? 0.001 : dist, 2); // Avoid division by zero\r\n                weightedSum += (station.highest_sub_index || 0) * weight;\r\n                weightSum += weight;\r\n            });\r\n            setNearestStation({ id: nearestId, distance: nearestDist });\r\n            if (weightSum > 0) setInterpolatedData({ aqi: Math.round(weightedSum / weightSum) });\r\n        }\r\n    }, [userLocation, stations]);\r\n\r\n    // Effect for Fetching Forecast Data\r\n    useEffect(() => {\r\n        if (!selectedStationId) return;\r\n        const fetchForecast = async () => {\r\n            setIsForecastLoading(true);\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/api/station/${selectedStationId}/forecast/`);\r\n                const data = await response.json();\r\n                setForecastData(data.forecast_data || []);\r\n                setForecastUpdatedAt(data.forecast_updated_at || null);\r\n            } catch (err) {\r\n                console.error(\"Forecast fetch error:\", err);\r\n            } finally {\r\n                setIsForecastLoading(false);\r\n            }\r\n        };\r\n        fetchForecast();\r\n    }, [selectedStationId, API_BASE_URL]);\r\n    \r\n    // Effect for Drawing Map Markers\r\n    useEffect(() => {\r\n        if (!mapInstance || Object.keys(stations).length === 0) return;\r\n        \r\n        Object.values(markersRef.current).forEach(marker => marker.remove());\r\n        markersRef.current = {};\r\n\r\n        Object.entries(stations).forEach(([id, station]) => {\r\n            const { lat, lng } = station.station_info;\r\n            const aqi = station.highest_sub_index;\r\n            const markerOptions = { radius: selectedStationId === id ? 12 : 8, fillColor: getAQIColor(aqi), color: selectedStationId === id ? '#ffffff' : '#1e293b', weight: selectedStationId === id ? 3 : 1.5, opacity: 1, fillOpacity: 0.85 };\r\n            const marker = window.L.circleMarker([lat, lng], markerOptions).addTo(mapInstance);\r\n            marker.on('click', () => {\r\n                setSelectedStationId(id);\r\n                setIsPanelOpen(true);\r\n                mapInstance.setView([lat, lng], 15);\r\n            });\r\n            markersRef.current[id] = marker;\r\n        });\r\n    }, [mapInstance, stations, selectedStationId]);\r\n\r\n    const selectedStationData = stations[selectedStationId];\r\n    const pollutants = [\r\n        { key: 'pm25', name: 'PM2.5' }, { key: 'pm10', name: 'PM10' }, { key: 'so2', name: 'SO₂' }, \r\n        { key: 'no2', name: 'NO₂' }, { key: 'co', name: 'CO' }, { key: 'o3', name: 'O₃' }, { key: 'nh3', name: 'NH₃' }\r\n    ];\r\n\r\n    const forecastChartData = useMemo(() => { /* ... memoized chart data ... */ }, [forecastData, selectedParameter]);\r\n    const forecastChartOptions = { /* ... chart options ... */ };\r\n\r\n    return (\r\n        <div className=\"map-page\">\r\n            <nav className=\"navbar\">{/* ... your navbar JSX ... */}</nav>\r\n            <div className=\"main-content\">\r\n                <div className=\"map-container\"><div id=\"map\" ref={mapRef} className=\"map-element\"></div></div>\r\n                <div className={`details-panel ${isPanelOpen ? 'open' : ''}`}>\r\n                    <button className=\"panel-toggle\" onClick={() => setIsPanelOpen(!isPanelOpen)} title={isPanelOpen ? \"Hide Panel\" : \"Show Panel\"}>\r\n                        <i className={`fas ${isPanelOpen ? 'fa-chevron-right' : 'fa-chevron-left'}`}></i>\r\n                    </button>\r\n                    <div className=\"panel-header\">\r\n                         <h2 className=\"panel-title\"><i className=\"fas fa-satellite-dish\"></i> Monitoring Stations</h2>\r\n                         <div className=\"station-selector\">\r\n                            {Object.entries(stations).map(([id, station]) => (\r\n                                <button key={id} className={`station-btn ${selectedStationId === id ? 'active' : ''}`} onClick={() => setSelectedStationId(id)}>\r\n                                    <div className=\"station-btn-content\">\r\n                                        <span>{station.station_info.name}</span>\r\n                                        <span className=\"station-aqi\" style={{ color: getAQIColor(station.highest_sub_index) }}>\r\n                                            {Math.round(station.highest_sub_index) || 'N/A'}\r\n                                        </span>\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"panel-content\">\r\n                        {user && interpolatedData && nearestStation && (\r\n                            <div className=\"user-location-panel\">\r\n                                <div className=\"user-location-header\"><i className=\"fas fa-street-view\"></i><span>AQI at Your Location</span></div>\r\n                                <div className=\"user-location-body\">\r\n                                    <div className=\"user-aqi-value\">{nearestStation.distance < 1 ? stations[nearestStation.id]?.highest_sub_index : interpolatedData.aqi}</div>\r\n                                    <div className=\"user-location-details\">\r\n                                        <span>{nearestStation.distance < 1 ? 'Using nearest station data' : 'Interpolated value'}</span><br />\r\n                                        <span>Nearest: {stations[nearestStation.id]?.station_info.name} ({nearestStation.distance.toFixed(1)} km)</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        {isLoading ? <div className=\"panel-loader\"><div className=\"loading-spinner\"></div></div> :\r\n                        error ? <div>Error: {error}</div> :\r\n                        selectedStationData ? (\r\n                            <div>\r\n                                <h3>{selectedStationData.station_info.name}</h3>\r\n                                <p>Current AQI: {Math.round(selectedStationData.highest_sub_index)} ({getAQIStatus(selectedStationData.highest_sub_index)})</p>\r\n                                <div className=\"pollutant-metrics\">\r\n                                    <div className=\"pollutant-grid\">\r\n                                        {pollutants.map(p => (\r\n                                            <div className=\"metric-card\" key={p.key}>\r\n                                                <div className=\"metric-label\">{p.name}</div>\r\n                                                <div className=\"metric-value\">\r\n                                                    {(selectedStationData.averages?.[p.key]?.toFixed(2)) ?? 'N/A'}\r\n                                                    <span className=\"metric-unit\"> µg/m³</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"forecast-section\">\r\n                                    <div className=\"forecast-header\">\r\n                                        <h4 className=\"forecast-title\">4-Day Forecast</h4>\r\n                                        <select className=\"parameter-selector\" value={selectedParameter} onChange={(e) => setSelectedParameter(e.target.value)}>\r\n                                            <option value=\"pm25_max\">PM2.5</option>\r\n                                            <option value=\"pm10_max\">PM10</option>\r\n                                            <option value=\"so2_max\">SO₂</option>\r\n                                            {/* ... other options ... */}\r\n                                        </select>\r\n                                    </div>\r\n                                    {forecastUpdatedAt && <div style={{ fontSize: '0.75rem', color: '#94a3b8', marginBottom: '0.5rem' }}>Updated: {new Date(forecastUpdatedAt).toLocaleString()}</div>}\r\n                                    {isForecastLoading ? <div className=\"panel-loader\"><p>Loading forecast...</p></div> :\r\n                                    <div className=\"chart-container\"><Line options={forecastChartOptions} data={forecastChartData} /></div>}\r\n                                </div>\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}