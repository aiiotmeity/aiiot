{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './css/MapPage.css';\n\n// Helper function to get AQI color\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getAQIColor = aqi => {\n  if (aqi === null || aqi === undefined) return '#6b7280';\n  if (aqi <= 50) return '#10b981';\n  if (aqi <= 100) return '#f59e0b';\n  if (aqi <= 150) return '#ef4444';\n  if (aqi <= 200) return '#dc2626';\n  if (aqi <= 300) return '#7c2d12';\n  return '#4c1d95';\n};\n\n// Main Component\nconst MapPage = () => {\n  _s();\n  var _selectedStationData$, _selectedStationData$2;\n  const [map, setMap] = React.useState(null);\n  const [stations, setStations] = React.useState({});\n  const [selectedStationId, setSelectedStationId] = React.useState('lora-v1');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n  // --- NEW STATE ---\n  // Add state to track the selected parameter for the forecast chart.\n  const [selectedParameter, setSelectedParameter] = React.useState('pm25');\n  const mapRef = React.useRef(null);\n  const markersRef = React.useRef({});\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Effect 1: Load Leaflet library and initialize the map.\n  React.useEffect(() => {\n    let isMounted = true;\n    const loadLeaflet = () => {\n      return new Promise((resolve, reject) => {\n        if (window.L) {\n          resolve(window.L);\n          return;\n        }\n        const link = document.createElement('link');\n        link.rel = \"stylesheet\";\n        link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\n        document.head.appendChild(link);\n        const script = document.createElement('script');\n        script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\n        script.async = true;\n        document.head.appendChild(script);\n        script.onload = () => {\n          if (isMounted) resolve(window.L);\n        };\n        script.onerror = () => {\n          if (isMounted) reject(new Error(\"Failed to load map library.\"));\n        };\n      });\n    };\n    const initialize = async () => {\n      try {\n        const L = await loadLeaflet();\n        if (isMounted && mapRef.current && !mapRef.current._leaflet_id) {\n          const mapInstance = L.map(mapRef.current).setView([10.176, 76.430], 15);\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);\n          setMap(mapInstance);\n        }\n      } catch (err) {\n        if (isMounted) setError(err.message);\n      }\n    };\n    initialize();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Effect 2: Fetch data once the map object is available\n  React.useEffect(() => {\n    if (!map) return;\n    let isMounted = true;\n    const fetchData = async () => {\n      setError(null);\n      try {\n        const response = await fetch(`${API_BASE_URL}/api/map/`);\n        if (!response.ok) {\n          throw new Error(`Server error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data && data.stations) {\n          if (isMounted) {\n            setStations(data.stations);\n            setIsLoading(false);\n          }\n        } else {\n          throw new Error('Received invalid data from server.');\n        }\n      } catch (err) {\n        if (isMounted) {\n          setError(err.message);\n          setIsLoading(false);\n        }\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 300000);\n    return () => {\n      isMounted = false;\n      clearInterval(interval);\n    };\n  }, [map, API_BASE_URL]);\n\n  // Effect 3: Update map markers when station data is updated\n  React.useEffect(() => {\n    if (!map || Object.keys(stations).length === 0) return;\n    Object.entries(stations).forEach(([id, station]) => {\n      var _station$station_info, _station$station_info2;\n      if (!(station !== null && station !== void 0 && (_station$station_info = station.station_info) !== null && _station$station_info !== void 0 && _station$station_info.lat) || !(station !== null && station !== void 0 && (_station$station_info2 = station.station_info) !== null && _station$station_info2 !== void 0 && _station$station_info2.lng)) return;\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\n      if (markersRef.current[id]) {\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\n        markersRef.current[id].setStyle({\n          fillColor: getAQIColor(aqi)\n        });\n      } else {\n        const marker = window.L.circleMarker([lat, lng], {\n          radius: 15,\n          fillColor: getAQIColor(aqi),\n          color: '#ffffff',\n          weight: 3,\n          opacity: 1,\n          fillOpacity: 0.8\n        }).addTo(map);\n        marker.bindPopup(popupContent);\n        marker.on('click', () => setSelectedStationId(id));\n        markersRef.current[id] = marker;\n      }\n    });\n  }, [map, stations]);\n  const selectedStationData = stations[selectedStationId];\n\n  // --- NEW ---\n  // Data for the forecast chart, now dynamic based on the selected parameter\n  const forecastChartData = {\n    labels: (selectedStationData === null || selectedStationData === void 0 ? void 0 : (_selectedStationData$ = selectedStationData.forecast_data) === null || _selectedStationData$ === void 0 ? void 0 : _selectedStationData$.map(d => d.day)) || [],\n    datasets: [{\n      label: `${selectedParameter.toUpperCase()} Forecast`,\n      data: (selectedStationData === null || selectedStationData === void 0 ? void 0 : (_selectedStationData$2 = selectedStationData.forecast_data) === null || _selectedStationData$2 === void 0 ? void 0 : _selectedStationData$2.map(d => d[`${selectedParameter}_max`])) || [],\n      borderColor: '#3b82f6',\n      backgroundColor: 'rgba(59, 130, 246, 0.2)',\n      tension: 0.1\n    }]\n  };\n  const parameterButtons = [{\n    key: 'pm25',\n    label: 'PM2.5'\n  }, {\n    key: 'pm10',\n    label: 'PM10'\n  }, {\n    key: 'nh3',\n    label: 'NH3'\n  }, {\n    key: 'so2',\n    label: 'SO2'\n  }, {\n    key: 'no2',\n    label: 'NO2'\n  }, {\n    key: 'co',\n    label: 'CO'\n  }, {\n    key: 'o3',\n    label: 'O3'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        ref: mapRef,\n        className: \"map-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-loading-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-panel open\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 19\n      }, this), !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-selector\",\n            children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading stations...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 25\n            }, this) : Object.keys(stations).map(stationId => {\n              var _stations$stationId, _stations$stationId$s;\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `station-btn ${selectedStationId === stationId ? 'active' : ''}`,\n                onClick: () => setSelectedStationId(stationId),\n                children: ((_stations$stationId = stations[stationId]) === null || _stations$stationId === void 0 ? void 0 : (_stations$stationId$s = _stations$stationId.station_info) === null || _stations$stationId$s === void 0 ? void 0 : _stations$stationId$s.name) || stationId\n              }, stationId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 25\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: selectedStationData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"aqi-overview\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aqi-value\",\n                style: {\n                  color: getAQIColor(selectedStationData.highest_sub_index)\n                },\n                children: Math.round(selectedStationData.highest_sub_index) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aqi-status-text\",\n                children: [\"Air Quality Index (\", selectedStationData.aqi_status || 'Unknown', \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metrics-grid\",\n              children: ['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => {\n                var _selectedStationData$3;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-label\",\n                    children: key.toUpperCase()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"metric-value\",\n                    children: (_selectedStationData$3 = selectedStationData.averages) !== null && _selectedStationData$3 !== void 0 && _selectedStationData$3[key] ? Math.round(selectedStationData.averages[key]) : '--'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 29\n                  }, this)]\n                }, key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast-title\",\n                children: \"4-Day Forecast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"parameter-controls\",\n                children: parameterButtons.map(param => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `parameter-btn ${selectedParameter === param.key ? 'active' : ''}`,\n                  onClick: () => setSelectedParameter(param.key),\n                  children: param.label\n                }, param.key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 33\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 25\n              }, this), selectedStationData.forecast_data && selectedStationData.forecast_data.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '200px'\n                },\n                children: /*#__PURE__*/_jsxDEV(Line, {\n                  data: forecastChartData // Use the dynamic chart data\n                  ,\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    legend: {\n                      display: false\n                    },\n                    scales: {\n                      yAxes: [{\n                        ticks: {\n                          fontColor: '#94a3b8',\n                          beginAtZero: true\n                        }\n                      }],\n                      xAxes: [{\n                        ticks: {\n                          fontColor: '#94a3b8'\n                        }\n                      }]\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 27\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Forecast data is not available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\",\n            style: {\n              margin: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"yEqCqBlotsqPmBShg4CYwfo2MtA=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","getAQIColor","aqi","undefined","MapPage","_s","_selectedStationData$","_selectedStationData$2","map","setMap","useState","stations","setStations","selectedStationId","setSelectedStationId","isLoading","setIsLoading","error","setError","selectedParameter","setSelectedParameter","mapRef","useRef","markersRef","API_BASE_URL","process","env","REACT_APP_API_URL","useEffect","isMounted","loadLeaflet","Promise","resolve","reject","window","L","link","document","createElement","rel","href","head","appendChild","script","src","async","onload","onerror","Error","initialize","current","_leaflet_id","mapInstance","setView","tileLayer","addTo","err","message","fetchData","response","fetch","ok","status","data","json","interval","setInterval","clearInterval","Object","keys","length","entries","forEach","id","station","_station$station_info","_station$station_info2","station_info","lat","lng","highest_sub_index","popupContent","name","Math","round","setLatLng","setPopupContent","setStyle","fillColor","marker","circleMarker","radius","color","weight","opacity","fillOpacity","bindPopup","on","selectedStationData","forecastChartData","labels","forecast_data","d","day","datasets","label","toUpperCase","borderColor","backgroundColor","tension","parameterButtons","key","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","stationId","_stations$stationId","_stations$stationId$s","onClick","style","aqi_status","_selectedStationData$3","averages","param","height","options","responsive","maintainAspectRatio","legend","display","scales","yAxes","ticks","fontColor","beginAtZero","xAxes","margin","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './css/MapPage.css';\r\n\r\n// Helper function to get AQI color\r\nconst getAQIColor = (aqi) => {\r\n  if (aqi === null || aqi === undefined) return '#6b7280';\r\n  if (aqi <= 50) return '#10b981';\r\n  if (aqi <= 100) return '#f59e0b';\r\n  if (aqi <= 150) return '#ef4444';\r\n  if (aqi <= 200) return '#dc2626';\r\n  if (aqi <= 300) return '#7c2d12';\r\n  return '#4c1d95';\r\n};\r\n\r\n// Main Component\r\nconst MapPage = () => {\r\n  const [map, setMap] = React.useState(null);\r\n  const [stations, setStations] = React.useState({});\r\n  const [selectedStationId, setSelectedStationId] = React.useState('lora-v1');\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [error, setError] = React.useState(null);\r\n  // --- NEW STATE ---\r\n  // Add state to track the selected parameter for the forecast chart.\r\n  const [selectedParameter, setSelectedParameter] = React.useState('pm25');\r\n\r\n  const mapRef = React.useRef(null);\r\n  const markersRef = React.useRef({});\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  // Effect 1: Load Leaflet library and initialize the map.\r\n  React.useEffect(() => {\r\n    let isMounted = true;\r\n    const loadLeaflet = () => {\r\n      return new Promise((resolve, reject) => {\r\n        if (window.L) {\r\n          resolve(window.L);\r\n          return;\r\n        }\r\n        const link = document.createElement('link');\r\n        link.rel = \"stylesheet\";\r\n        link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\r\n        document.head.appendChild(link);\r\n        const script = document.createElement('script');\r\n        script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\r\n        script.async = true;\r\n        document.head.appendChild(script);\r\n        script.onload = () => {\r\n          if (isMounted) resolve(window.L);\r\n        };\r\n        script.onerror = () => {\r\n          if (isMounted) reject(new Error(\"Failed to load map library.\"));\r\n        };\r\n      });\r\n    };\r\n\r\n    const initialize = async () => {\r\n      try {\r\n        const L = await loadLeaflet();\r\n        if (isMounted && mapRef.current && !mapRef.current._leaflet_id) {\r\n          const mapInstance = L.map(mapRef.current).setView([10.176, 76.430], 15);\r\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);\r\n          setMap(mapInstance);\r\n        }\r\n      } catch (err) {\r\n        if (isMounted) setError(err.message);\r\n      }\r\n    };\r\n\r\n    initialize();\r\n    return () => { isMounted = false; };\r\n  }, []);\r\n\r\n  // Effect 2: Fetch data once the map object is available\r\n  React.useEffect(() => {\r\n    if (!map) return;\r\n\r\n    let isMounted = true;\r\n    const fetchData = async () => {\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/api/map/`);\r\n        if (!response.ok) {\r\n          throw new Error(`Server error: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        if (data && data.stations) {\r\n          if (isMounted) {\r\n            setStations(data.stations);\r\n            setIsLoading(false);\r\n          }\r\n        } else {\r\n          throw new Error('Received invalid data from server.');\r\n        }\r\n      } catch (err) {\r\n        if (isMounted) {\r\n          setError(err.message);\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 300000);\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      clearInterval(interval);\r\n    };\r\n  }, [map, API_BASE_URL]);\r\n\r\n  // Effect 3: Update map markers when station data is updated\r\n  React.useEffect(() => {\r\n    if (!map || Object.keys(stations).length === 0) return;\r\n\r\n    Object.entries(stations).forEach(([id, station]) => {\r\n      if (!station?.station_info?.lat || !station?.station_info?.lng) return;\r\n\r\n      const { lat, lng } = station.station_info;\r\n      const aqi = station.highest_sub_index;\r\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\r\n\r\n      if (markersRef.current[id]) {\r\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\r\n        markersRef.current[id].setStyle({ fillColor: getAQIColor(aqi) });\r\n      } else {\r\n        const marker = window.L.circleMarker([lat, lng], {\r\n          radius: 15,\r\n          fillColor: getAQIColor(aqi),\r\n          color: '#ffffff',\r\n          weight: 3,\r\n          opacity: 1,\r\n          fillOpacity: 0.8\r\n        }).addTo(map);\r\n        marker.bindPopup(popupContent);\r\n        marker.on('click', () => setSelectedStationId(id));\r\n        markersRef.current[id] = marker;\r\n      }\r\n    });\r\n  }, [map, stations]);\r\n\r\n  const selectedStationData = stations[selectedStationId];\r\n\r\n  // --- NEW ---\r\n  // Data for the forecast chart, now dynamic based on the selected parameter\r\n  const forecastChartData = {\r\n      labels: selectedStationData?.forecast_data?.map(d => d.day) || [],\r\n      datasets: [{\r\n          label: `${selectedParameter.toUpperCase()} Forecast`,\r\n          data: selectedStationData?.forecast_data?.map(d => d[`${selectedParameter}_max`]) || [],\r\n          borderColor: '#3b82f6',\r\n          backgroundColor: 'rgba(59, 130, 246, 0.2)',\r\n          tension: 0.1\r\n      }]\r\n  };\r\n  \r\n  const parameterButtons = [\r\n      { key: 'pm25', label: 'PM2.5' },\r\n      { key: 'pm10', label: 'PM10' },\r\n      { key: 'nh3', label: 'NH3' },\r\n      { key: 'so2', label: 'SO2' },\r\n      { key: 'no2', label: 'NO2' },\r\n      { key: 'co', label: 'CO' },\r\n      { key: 'o3', label: 'O3' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"map-page\">\r\n      <div className=\"map-container\">\r\n        <div id=\"map\" ref={mapRef} className=\"map-element\"></div>\r\n        {isLoading && (\r\n            <div className=\"map-loading-overlay\">\r\n                <div className=\"loading-spinner\"></div>\r\n            </div>\r\n        )}\r\n      </div>\r\n      <div className=\"details-panel open\">\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {!error && (\r\n            <>\r\n                <div className=\"panel-header\">\r\n                  <div className=\"station-selector\">\r\n                    {isLoading ? (\r\n                        <p>Loading stations...</p>\r\n                    ) : (\r\n                      Object.keys(stations).map(stationId => (\r\n                        <button\r\n                          key={stationId}\r\n                          className={`station-btn ${selectedStationId === stationId ? 'active' : ''}`}\r\n                          onClick={() => setSelectedStationId(stationId)}\r\n                        >\r\n                          {stations[stationId]?.station_info?.name || stationId}\r\n                        </button>\r\n                      ))\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className=\"panel-content\">\r\n                  {selectedStationData ? (\r\n                    <>\r\n                      <div className=\"aqi-overview\">\r\n                        <div className=\"aqi-value\" style={{ color: getAQIColor(selectedStationData.highest_sub_index) }}>\r\n                          {Math.round(selectedStationData.highest_sub_index) || 'N/A'}\r\n                        </div>\r\n                        <div className=\"aqi-status-text\">Air Quality Index ({selectedStationData.aqi_status || 'Unknown'})</div>\r\n                      </div>\r\n                      <div className=\"metrics-grid\">\r\n                        {['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => (\r\n                          <div key={key} className=\"metric-card\">\r\n                            <div className=\"metric-label\">{key.toUpperCase()}</div>\r\n                            <div className=\"metric-value\">{selectedStationData.averages?.[key] ? Math.round(selectedStationData.averages[key]) : '--'}</div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                      <div className=\"forecast-section\">\r\n                        <div className=\"forecast-title\">4-Day Forecast</div>\r\n                        {/* --- NEW: Parameter Selector Buttons --- */}\r\n                        <div className=\"parameter-controls\">\r\n                            {parameterButtons.map(param => (\r\n                                <button\r\n                                    key={param.key}\r\n                                    className={`parameter-btn ${selectedParameter === param.key ? 'active' : ''}`}\r\n                                    onClick={() => setSelectedParameter(param.key)}\r\n                                >\r\n                                    {param.label}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                        {selectedStationData.forecast_data && selectedStationData.forecast_data.length > 0 ? (\r\n                          <div style={{ height: '200px' }}>\r\n                            <Line\r\n                              data={forecastChartData} // Use the dynamic chart data\r\n                              options={{\r\n                                responsive: true,\r\n                                maintainAspectRatio: false,\r\n                                legend: { display: false },\r\n                                scales: {\r\n                                  yAxes: [{ ticks: { fontColor: '#94a3b8', beginAtZero: true } }],\r\n                                  xAxes: [{ ticks: { fontColor: '#94a3b8' } }]\r\n                                }\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <p>Forecast data is not available.</p>\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <div className=\"loading-spinner\" style={{ margin: 'auto' }}></div>\r\n                  )}\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}