{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './css/MapPage.css';\n\n// This is a helper function to get the color for the AQI value\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getAQIColor = aqi => {\n  if (!aqi) return '#6b7280'; // Gray for unknown\n  if (aqi <= 50) return '#10b981'; // Green\n  if (aqi <= 100) return '#f59e0b'; // Yellow\n  if (aqi <= 150) return '#ef4444'; // Red\n  if (aqi <= 200) return '#dc2626'; // Dark Red\n  if (aqi <= 300) return '#7c2d12'; // Brown\n  return '#4c1d95'; // Purple\n};\nconst MapPage = () => {\n  _s();\n  // State for the map and data\n  const [map, setMap] = useState(null);\n  const [stations, setStations] = useState({});\n  // CORRECTED: Use 'lora-v1' to match the API key\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Refs to hold the map instance and markers\n  const mapRef = useRef(null);\n  const markersRef = useRef({});\n\n  // API URL\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Function to initialize the map\n  const initializeMap = useCallback(() => {\n    if (mapRef.current && !mapRef.current._leaflet_id) {\n      const mapInstance = window.L.map(mapRef.current, {\n        center: [10.176, 76.430],\n        zoom: 15\n      });\n      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; OpenStreetMap contributors'\n      }).addTo(mapInstance);\n      setMap(mapInstance);\n    }\n  }, []);\n\n  // 1. Effect to load Leaflet library and initialize the map once\n  useEffect(() => {\n    if (!window.L) {\n      const script = document.createElement('script');\n      script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\n      document.head.appendChild(script);\n      const link = document.createElement('link');\n      link.rel = \"stylesheet\";\n      link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\n      document.head.appendChild(link);\n      script.onload = initializeMap;\n    } else {\n      initializeMap();\n    }\n  }, [initializeMap]);\n\n  // 2. Effect to fetch data from our single, fast API\n  useEffect(() => {\n    if (!map) return; // Only fetch data after map is ready\n\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${API_BASE_URL}/api/map/`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok. Please check the backend server.');\n        }\n        const data = await response.json();\n        setStations(data.stations);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetch data error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    // Set up a timer to refresh data every 5 minutes\n    const interval = setInterval(fetchData, 300000);\n    return () => clearInterval(interval); // Cleanup timer on component unmount\n  }, [map, API_BASE_URL]);\n\n  // 3. Effect to update map markers when data changes\n  useEffect(() => {\n    if (!map || Object.keys(stations).length === 0) return;\n    Object.entries(stations).forEach(([id, station]) => {\n      const {\n        lat,\n        lng\n      } = station.station_info;\n      const aqi = station.highest_sub_index;\n      const color = getAQIColor(aqi);\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\n      if (markersRef.current[id]) {\n        // Update existing marker\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\n        markersRef.current[id].setStyle({\n          fillColor: color\n        });\n      } else {\n        // Create new marker\n        const marker = window.L.circleMarker([lat, lng], {\n          radius: 15,\n          fillColor: color,\n          color: '#ffffff',\n          weight: 3,\n          opacity: 1,\n          fillOpacity: 0.8\n        }).addTo(map);\n        marker.bindPopup(popupContent);\n        marker.on('click', () => setSelectedStationId(id));\n        markersRef.current[id] = marker;\n      }\n    });\n  }, [map, stations]);\n  const selectedStationData = stations[selectedStationId];\n  if (loading && Object.keys(stations).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Map and Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 80\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        ref: mapRef,\n        className: \"map-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-notification\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-panel open\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"station-selector\",\n          children: Object.keys(stations).map(stationId => {\n            var _stations$stationId, _stations$stationId$s;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `station-btn ${selectedStationId === stationId ? 'active' : ''}`,\n              onClick: () => setSelectedStationId(stationId),\n              children: ((_stations$stationId = stations[stationId]) === null || _stations$stationId === void 0 ? void 0 : (_stations$stationId$s = _stations$stationId.station_info) === null || _stations$stationId$s === void 0 ? void 0 : _stations$stationId$s.name) || stationId\n            }, stationId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-content\",\n        children: selectedStationData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"aqi-overview\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"aqi-value\",\n              style: {\n                color: getAQIColor(selectedStationData.highest_sub_index)\n              },\n              children: Math.round(selectedStationData.highest_sub_index) || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"aqi-status-text\",\n              children: [\"Air Quality Index (\", selectedStationData.aqi_status, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metrics-grid\",\n            children: ['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => {\n              var _selectedStationData$;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"metric-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-label\",\n                  children: key.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: (_selectedStationData$ = selectedStationData.averages) !== null && _selectedStationData$ !== void 0 && _selectedStationData$[key] ? Math.round(selectedStationData.averages[key]) : '--'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 33\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-title\",\n              children: \"5-Day Forecast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 25\n            }, this), selectedStationData.forecast_data && selectedStationData.forecast_data.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n              data: {\n                labels: selectedStationData.forecast_data.map(d => d.day),\n                datasets: [{\n                  label: 'PM2.5 Forecast',\n                  data: selectedStationData.forecast_data.map(d => d.pm25_max),\n                  fill: false,\n                  borderColor: '#3b82f6',\n                  backgroundColor: '#3b82f6',\n                  tension: 0.1\n                }]\n              },\n              options: {\n                responsive: true,\n                legend: {\n                  display: false\n                },\n                scales: {\n                  yAxes: [{\n                    ticks: {\n                      fontColor: '#94a3b8'\n                    }\n                  }],\n                  xAxes: [{\n                    ticks: {\n                      fontColor: '#94a3b8'\n                    }\n                  }]\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Forecast data is not available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          style: {\n            margin: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"5iS4urcm8S7kD0ybmrAvJHRGx4s=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","getAQIColor","aqi","MapPage","_s","map","setMap","stations","setStations","selectedStationId","setSelectedStationId","loading","setLoading","error","setError","mapRef","markersRef","API_BASE_URL","process","env","REACT_APP_API_URL","initializeMap","current","_leaflet_id","mapInstance","window","L","center","zoom","tileLayer","attribution","addTo","script","document","createElement","src","head","appendChild","link","rel","href","onload","fetchData","response","fetch","ok","Error","data","json","err","message","console","interval","setInterval","clearInterval","Object","keys","length","entries","forEach","id","station","lat","lng","station_info","highest_sub_index","color","popupContent","name","Math","round","setLatLng","setPopupContent","setStyle","fillColor","marker","circleMarker","radius","weight","opacity","fillOpacity","bindPopup","on","selectedStationData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","stationId","_stations$stationId","_stations$stationId$s","onClick","style","aqi_status","key","_selectedStationData$","toUpperCase","averages","forecast_data","labels","d","day","datasets","label","pm25_max","fill","borderColor","backgroundColor","tension","options","responsive","legend","display","scales","yAxes","ticks","fontColor","xAxes","margin","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './css/MapPage.css';\r\n\r\n// This is a helper function to get the color for the AQI value\r\nconst getAQIColor = (aqi) => {\r\n  if (!aqi) return '#6b7280'; // Gray for unknown\r\n  if (aqi <= 50) return '#10b981'; // Green\r\n  if (aqi <= 100) return '#f59e0b'; // Yellow\r\n  if (aqi <= 150) return '#ef4444'; // Red\r\n  if (aqi <= 200) return '#dc2626'; // Dark Red\r\n  if (aqi <= 300) return '#7c2d12'; // Brown\r\n  return '#4c1d95'; // Purple\r\n};\r\n\r\nconst MapPage = () => {\r\n  // State for the map and data\r\n  const [map, setMap] = useState(null);\r\n  const [stations, setStations] = useState({});\r\n  // CORRECTED: Use 'lora-v1' to match the API key\r\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Refs to hold the map instance and markers\r\n  const mapRef = useRef(null);\r\n  const markersRef = useRef({});\r\n\r\n  // API URL\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  // Function to initialize the map\r\n  const initializeMap = useCallback(() => {\r\n    if (mapRef.current && !mapRef.current._leaflet_id) {\r\n      const mapInstance = window.L.map(mapRef.current, {\r\n          center: [10.176, 76.430],\r\n          zoom: 15,\r\n      });\r\n      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n          attribution: '&copy; OpenStreetMap contributors'\r\n      }).addTo(mapInstance);\r\n      setMap(mapInstance);\r\n    }\r\n  }, []);\r\n\r\n  // 1. Effect to load Leaflet library and initialize the map once\r\n  useEffect(() => {\r\n    if (!window.L) {\r\n      const script = document.createElement('script');\r\n      script.src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\";\r\n      document.head.appendChild(script);\r\n      const link = document.createElement('link');\r\n      link.rel = \"stylesheet\";\r\n      link.href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\";\r\n      document.head.appendChild(link);\r\n      script.onload = initializeMap;\r\n    } else {\r\n      initializeMap();\r\n    }\r\n  }, [initializeMap]);\r\n\r\n  // 2. Effect to fetch data from our single, fast API\r\n  useEffect(() => {\r\n    if (!map) return; // Only fetch data after map is ready\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/api/map/`);\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok. Please check the backend server.');\r\n        }\r\n        const data = await response.json();\r\n        setStations(data.stations);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        console.error(\"Fetch data error:\", err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    // Set up a timer to refresh data every 5 minutes\r\n    const interval = setInterval(fetchData, 300000);\r\n    return () => clearInterval(interval); // Cleanup timer on component unmount\r\n  }, [map, API_BASE_URL]);\r\n\r\n  // 3. Effect to update map markers when data changes\r\n  useEffect(() => {\r\n    if (!map || Object.keys(stations).length === 0) return;\r\n\r\n    Object.entries(stations).forEach(([id, station]) => {\r\n      const { lat, lng } = station.station_info;\r\n      const aqi = station.highest_sub_index;\r\n      const color = getAQIColor(aqi);\r\n      const popupContent = `<b>${station.station_info.name}</b><br>AQI: ${aqi ? Math.round(aqi) : 'N/A'}`;\r\n\r\n      if (markersRef.current[id]) {\r\n        // Update existing marker\r\n        markersRef.current[id].setLatLng([lat, lng]).setPopupContent(popupContent);\r\n        markersRef.current[id].setStyle({ fillColor: color });\r\n      } else {\r\n        // Create new marker\r\n        const marker = window.L.circleMarker([lat, lng], {\r\n          radius: 15,\r\n          fillColor: color,\r\n          color: '#ffffff',\r\n          weight: 3,\r\n          opacity: 1,\r\n          fillOpacity: 0.8\r\n        }).addTo(map);\r\n\r\n        marker.bindPopup(popupContent);\r\n        marker.on('click', () => setSelectedStationId(id));\r\n        markersRef.current[id] = marker;\r\n      }\r\n    });\r\n  }, [map, stations]);\r\n\r\n  const selectedStationData = stations[selectedStationId];\r\n\r\n  if (loading && Object.keys(stations).length === 0) {\r\n    return <div className=\"map-loading\"><div className=\"loading-spinner\"></div><p>Loading Map and Data...</p></div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"map-page\">\r\n      <div className=\"map-container\">\r\n        <div id=\"map\" ref={mapRef} className=\"map-element\"></div>\r\n        {error && <div className=\"error-notification\">{error}</div>}\r\n      </div>\r\n      {/* CORRECTED JSX STRUCTURE: panel-content is now INSIDE details-panel */}\r\n      <div className=\"details-panel open\">\r\n        <div className=\"panel-header\">\r\n            <div className=\"station-selector\">\r\n                {Object.keys(stations).map(stationId => (\r\n                    <button\r\n                        key={stationId}\r\n                        className={`station-btn ${selectedStationId === stationId ? 'active' : ''}`}\r\n                        onClick={() => setSelectedStationId(stationId)}\r\n                    >\r\n                        {stations[stationId]?.station_info?.name || stationId}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n        <div className=\"panel-content\">\r\n            {selectedStationData ? (\r\n                <>\r\n                    <div className=\"aqi-overview\">\r\n                        <div className=\"aqi-value\" style={{ color: getAQIColor(selectedStationData.highest_sub_index) }}>\r\n                            {Math.round(selectedStationData.highest_sub_index) || 'N/A'}\r\n                        </div>\r\n                        <div className=\"aqi-status-text\">Air Quality Index ({selectedStationData.aqi_status})</div>\r\n                    </div>\r\n                    <div className=\"metrics-grid\">\r\n                        {['pm25', 'pm10', 'so2', 'no2', 'co', 'o3', 'nh3'].map(key => (\r\n                            <div key={key} className=\"metric-card\">\r\n                                <div className=\"metric-label\">{key.toUpperCase()}</div>\r\n                                <div className=\"metric-value\">{selectedStationData.averages?.[key] ? Math.round(selectedStationData.averages[key]) : '--'}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"forecast-section\">\r\n                        <div className=\"forecast-title\">5-Day Forecast</div>\r\n                        {selectedStationData.forecast_data && selectedStationData.forecast_data.length > 0 ? (\r\n                            <Line\r\n                                data={{\r\n                                    labels: selectedStationData.forecast_data.map(d => d.day),\r\n                                    datasets: [{\r\n                                        label: 'PM2.5 Forecast',\r\n                                        data: selectedStationData.forecast_data.map(d => d.pm25_max),\r\n                                        fill: false,\r\n                                        borderColor: '#3b82f6',\r\n                                        backgroundColor: '#3b82f6',\r\n                                        tension: 0.1\r\n                                    }]\r\n                                }}\r\n                                options={{\r\n                                    responsive: true,\r\n                                    legend: { display: false },\r\n                                    scales: {\r\n                                        yAxes: [{ ticks: { fontColor: '#94a3b8' } }],\r\n                                        xAxes: [{ ticks: { fontColor: '#94a3b8' } }]\r\n                                    }\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <p>Forecast data is not available.</p>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                 <div className=\"loading-spinner\" style={{margin: 'auto'}}></div>\r\n            )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}