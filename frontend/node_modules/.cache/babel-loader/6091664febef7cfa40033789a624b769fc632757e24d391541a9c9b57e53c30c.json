{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arathy\\\\React_django\\\\my-django-react-app\\\\frontend\\\\src\\\\components\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { useAuth } from '../App';\nimport './css/MapPage.css';\n\n// --- Helper Functions ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst getAQIColor = aqi => {/* ... color function ... */};\nconst getAQIStatus = aqi => {/* ... status function ... */};\n\n// New helper to calculate distance between two coordinates\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in km\n};\nconst MapPage = () => {\n  _s();\n  var _stations$nearestStat;\n  const [mapInstance, setMapInstance] = useState(null);\n  const [stations, setStations] = useState({});\n  const [selectedStationId, setSelectedStationId] = useState('lora-v1');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const [forecastData, setForecastData] = useState([]);\n  const [isForecastLoading, setIsForecastLoading] = useState(false);\n  const [selectedParameter, setSelectedParameter] = useState('pm25_max');\n\n  // --- NEW STATE for User Location & Interpolation ---\n  const [userLocation, setUserLocation] = useState(null);\n  const [interpolatedData, setInterpolatedData] = useState(null);\n  const [nearestStation, setNearestStation] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef({});\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // ... (useEffect for Map Initialization) ...\n\n  // --- Effect for User Location Tracking (only for logged-in users) ---\n  useEffect(() => {\n    if (user && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, err => {\n        console.warn(`Geolocation error: ${err.message}`);\n      });\n    }\n  }, [user]);\n\n  // ... (useEffect for Fetching Real-time Data) ...\n\n  // --- Effect for Calculating Interpolated Values ---\n  useEffect(() => {\n    if (userLocation && Object.keys(stations).length > 0) {\n      let weightedSum = 0;\n      let weightSum = 0;\n      let nearestDist = Infinity;\n      let nearestId = null;\n      Object.entries(stations).forEach(([id, station]) => {\n        const dist = calculateDistance(userLocation.lat, userLocation.lng, station.station_info.lat, station.station_info.lng);\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          nearestId = id;\n        }\n        if (dist === 0) {\n          // Avoid division by zero\n          weightedSum = station.highest_sub_index;\n          weightSum = 1;\n          return;\n        }\n        const weight = 1 / Math.pow(dist, 2);\n        weightedSum += station.highest_sub_index * weight;\n        weightSum += weight;\n      });\n      setNearestStation({\n        id: nearestId,\n        distance: nearestDist\n      });\n      if (weightSum > 0) {\n        setInterpolatedData({\n          aqi: Math.round(weightedSum / weightSum)\n        });\n      }\n    }\n  }, [userLocation, stations]);\n\n  // ... (useEffect for fetching forecast and updating markers) ...\n\n  // ... (Memo for chart data and options) ...\n\n  const selectedStationData = stations[selectedStationId];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          ref: mapRef,\n          className: \"map-element\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `details-panel ${isPanelOpen ? 'open' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"panel-toggle\" /* ... */\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-satellite-dish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 54\n            }, this), \" Monitoring Stations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-selector\",\n            children: Object.entries(stations).map(([id, station]) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `station-btn ${selectedStationId === id ? 'active' : ''}`,\n              onClick: () => setSelectedStationId(id),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"station-btn-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"station-name\",\n                  children: station.station_info.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"station-aqi\",\n                  style: {\n                    color: getAQIColor(station.highest_sub_index)\n                  },\n                  children: Math.round(station.highest_sub_index) || 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 37\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-content\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-loader\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 39\n          }, this), user && interpolatedData && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-location-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-street-view\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"AQI at Your Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-aqi-value\",\n                children: interpolatedData.aqi\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-location-details\",\n                children: [nearestStation.distance < 1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Using data from nearest station\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 45\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Interpolated value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Nearest: \", (_stations$nearestStat = stations[nearestStation.id]) === null || _stations$nearestStat === void 0 ? void 0 : _stations$nearestStat.station_info.name, \" (\", nearestStation.distance.toFixed(1), \" km)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 35\n          }, this), selectedStationData && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(MapPage, \"0mLvsStDGa7J/uqr/RzH0ndCYkE=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","Link","useNavigate","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","useAuth","jsxDEV","_jsxDEV","register","getAQIColor","aqi","getAQIStatus","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","MapPage","_s","_stations$nearestStat","mapInstance","setMapInstance","stations","setStations","selectedStationId","setSelectedStationId","isLoading","setIsLoading","error","setError","isPanelOpen","setIsPanelOpen","forecastData","setForecastData","isForecastLoading","setIsForecastLoading","selectedParameter","setSelectedParameter","userLocation","setUserLocation","interpolatedData","setInterpolatedData","nearestStation","setNearestStation","mapRef","markersRef","navigate","user","API_BASE_URL","process","env","REACT_APP_API_URL","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","err","console","warn","message","Object","keys","length","weightedSum","weightSum","nearestDist","Infinity","nearestId","entries","forEach","id","station","dist","station_info","highest_sub_index","weight","pow","distance","round","selectedStationData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","onClick","name","style","color","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/arathy/React_django/my-django-react-app/frontend/src/components/MapPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\r\nimport { useAuth } from '../App';\r\nimport './css/MapPage.css';\r\n\r\n// --- Helper Functions ---\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\r\nconst getAQIColor = (aqi) => { /* ... color function ... */ };\r\nconst getAQIStatus = (aqi) => { /* ... status function ... */ };\r\n\r\n// New helper to calculate distance between two coordinates\r\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // Radius of the Earth in km\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLon = (lon2 - lon1) * Math.PI / 180;\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n              Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distance in km\r\n};\r\n\r\n\r\nconst MapPage = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [stations, setStations] = useState({});\r\n    const [selectedStationId, setSelectedStationId] = useState('lora-v1');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [isPanelOpen, setIsPanelOpen] = useState(true);\r\n    const [forecastData, setForecastData] = useState([]);\r\n    const [isForecastLoading, setIsForecastLoading] = useState(false);\r\n    const [selectedParameter, setSelectedParameter] = useState('pm25_max');\r\n    \r\n    // --- NEW STATE for User Location & Interpolation ---\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [interpolatedData, setInterpolatedData] = useState(null);\r\n    const [nearestStation, setNearestStation] = useState(null);\r\n\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef({});\r\n    const navigate = useNavigate();\r\n    const { user } = useAuth();\r\n    const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n    // ... (useEffect for Map Initialization) ...\r\n\r\n    // --- Effect for User Location Tracking (only for logged-in users) ---\r\n    useEffect(() => {\r\n        if (user && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    });\r\n                },\r\n                (err) => {\r\n                    console.warn(`Geolocation error: ${err.message}`);\r\n                }\r\n            );\r\n        }\r\n    }, [user]);\r\n\r\n    // ... (useEffect for Fetching Real-time Data) ...\r\n\r\n    // --- Effect for Calculating Interpolated Values ---\r\n    useEffect(() => {\r\n        if (userLocation && Object.keys(stations).length > 0) {\r\n            let weightedSum = 0;\r\n            let weightSum = 0;\r\n            let nearestDist = Infinity;\r\n            let nearestId = null;\r\n\r\n            Object.entries(stations).forEach(([id, station]) => {\r\n                const dist = calculateDistance(userLocation.lat, userLocation.lng, station.station_info.lat, station.station_info.lng);\r\n                \r\n                if (dist < nearestDist) {\r\n                    nearestDist = dist;\r\n                    nearestId = id;\r\n                }\r\n                \r\n                if (dist === 0) { // Avoid division by zero\r\n                    weightedSum = station.highest_sub_index;\r\n                    weightSum = 1;\r\n                    return;\r\n                }\r\n                \r\n                const weight = 1 / Math.pow(dist, 2);\r\n                weightedSum += station.highest_sub_index * weight;\r\n                weightSum += weight;\r\n            });\r\n            \r\n            setNearestStation({ id: nearestId, distance: nearestDist });\r\n\r\n            if (weightSum > 0) {\r\n                setInterpolatedData({ aqi: Math.round(weightedSum / weightSum) });\r\n            }\r\n        }\r\n    }, [userLocation, stations]);\r\n\r\n    // ... (useEffect for fetching forecast and updating markers) ...\r\n    \r\n    // ... (Memo for chart data and options) ...\r\n    \r\n    const selectedStationData = stations[selectedStationId];\r\n\r\n    return (\r\n        <div className=\"map-page\">\r\n            <nav className=\"navbar\">{/* ... your navbar JSX ... */}</nav>\r\n            <div className=\"main-content\">\r\n                <div className=\"map-container\">\r\n                    <div id=\"map\" ref={mapRef} className=\"map-element\"></div>\r\n                </div>\r\n                <div className={`details-panel ${isPanelOpen ? 'open' : ''}`}>\r\n                    <button className=\"panel-toggle\" /* ... */ >{/* ... */}</button>\r\n                    <div className=\"panel-header\">\r\n                         <h2 className=\"panel-title\"><i className=\"fas fa-satellite-dish\"></i> Monitoring Stations</h2>\r\n                         <div className=\"station-selector\">\r\n                            {Object.entries(stations).map(([id, station]) => (\r\n                                <button key={id} className={`station-btn ${selectedStationId === id ? 'active' : ''}`} onClick={() => setSelectedStationId(id)}>\r\n                                    <div className=\"station-btn-content\">\r\n                                        <span className=\"station-name\">{station.station_info.name}</span>\r\n                                        <span className=\"station-aqi\" style={{ color: getAQIColor(station.highest_sub_index) }}>\r\n                                            {Math.round(station.highest_sub_index) || 'N/A'}\r\n                                        </span>\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"panel-content\">\r\n                        {isLoading && <div className=\"panel-loader\"><div className=\"loading-spinner\"></div></div>}\r\n                        \r\n                        {/* --- NEW: User Location Panel --- */}\r\n                        {user && interpolatedData && (\r\n                            <div className=\"user-location-panel\">\r\n                                <div className=\"user-location-header\">\r\n                                    <i className=\"fas fa-street-view\"></i>\r\n                                    <span>AQI at Your Location</span>\r\n                                </div>\r\n                                <div className=\"user-location-body\">\r\n                                    <div className=\"user-aqi-value\">{interpolatedData.aqi}</div>\r\n                                    <div className=\"user-location-details\">\r\n                                        {nearestStation.distance < 1 ? (\r\n                                            <span>Using data from nearest station</span>\r\n                                        ) : (\r\n                                            <span>Interpolated value</span>\r\n                                        )}\r\n                                        <br />\r\n                                        <span>Nearest: {stations[nearestStation.id]?.station_info.name} ({nearestStation.distance.toFixed(1)} km)</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {error && <div>Error: {error}</div>}\r\n                        {selectedStationData && (\r\n                            <div>\r\n                                {/* ... Real-time metrics and forecast chart ... */}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}